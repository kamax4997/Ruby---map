<% content_for :title, "Traffic Flow Display" %>

<div class="ctrl-panel">
	<span id="toggle-ctrl-panel" class="glyphicon glyphicon-menu-left"></span>
	<p>Display of the current Traffic Flow Data</p>
	<div class="checkbox nospace">
		<label><input id="filter" onchange='handleConfidence(this);' type="checkbox" value="">Filter Confidence Level > 0.7</label>
	</div>
	</br>
	<div class="checkbox nospace">
		<label><input id="filter" onchange='handleFC1(this);' type="checkbox" value="">Filter on FC1</label>
	</div>
	</br>	
	<div id="centerCoordinate"></div>
	<div id="error"></div>
</div>

<div id="mapContainer"></div>
<div id="pageblock"></div>
<div id="spinner"></div>

<script type="text/javascript">
	/* 
		author domschuette
		(C) HERE 2017
	*/
	
	// Check whether the environment should use hi-res maps
	var hidpi = ('devicePixelRatio' in window && devicePixelRatio > 1);
	
	// check if the site was loaded via secure connection
	var secure = (location.protocol === 'https:') ? true : false;

	// Create a platform object to communicate with the HERE REST APIs
	var platform = new H.service.Platform({
			apikey: api_key,
			useHTTPS: secure
		}),
		maptypes = platform.createDefaultLayers(),
		group = new H.map.Group(),
		currentBubble,
		filterConfidence = false,
		maxFC1 = false,
		center = getUrlParameter("center"),
		zoom = getUrlParameter("zoom"),
		bbox = getUrlParameter("bbox"),
		SHIFTRIGHT = [0,3.3,3.2,2.3,2.2,1.6];
		SHIFTLEFT = [0,-4.7,-3.0,-2.5,-2.3,-1.6];

	// Instantiate a map in the 'map' div, set the base map to normal
	var map = new H.Map(document.getElementById('mapContainer'), maptypes.vector.normal.map, {
		pixelRatio: hidpi ? 2 : 1
	});

	// get the URL Parameters
	if(!center && !bbox && !zoom)
	{
		center = new H.geo.Point(53.341411354687615, -3.2352369512209975),
		zoom = 7;
	}
	else if(bbox)
	{
		var rect = new H.geo.Rect(bbox.split(',')[0], bbox.split(',')[1], bbox.split(',')[2], bbox.split(',')[3]);
		var cam = map.getCameraDataForBounds(rect);
		zoom = Math.ceil(cam.zoom);
		center = cam.position;
	}
	else if(center)
	{
		center = new H.geo.Point(center.split(',')[0], center.split(',')[1]);
	}
	if(!zoom)
	{
		zoom = 13;
	}
	
	map.setCenter(center);
	map.setZoom(zoom);

	// Enable the map event system
	var mapevents = new H.mapevents.MapEvents(map);
	
	// Enable map interaction (pan, zoom, pinch-to-zoom)
	var behavior = new H.mapevents.Behavior(mapevents);

	// Enable the default UI
	var ui = H.ui.UI.createDefault(map, maptypes);

	
	window.addEventListener('resize', function() { map.getViewPort().resize(); });

	map.addEventListener("mapviewchange", function() 
		{ 
			var d = document.getElementById("centerCoordinate"),
				c = map.getCenter(),
				lat = c.lat,
				lon = c.lng;
			d.innerHTML = "" + lat + " " + lon + " @" + map.getZoom();
		}
	);
	
	map.addEventListener("mapviewchangeend", function() 
		{ 
			requestTraffic(map.getViewModel().getLookAtData().bounds.getBoundingBox());
		}
	);
	
	handleConfidence = function(checkbox)
	{
		filterConfidence = checkbox.checked;
		requestTraffic(map.getViewModel().getLookAtData().bounds.getBoundingBox());
	}
	
	handleFC1 = function(checkbox)
	{
		maxFC1 = checkbox.checked;
		requestTraffic(map.getViewModel().getLookAtData().bounds.getBoundingBox());
	}
	
	requestTraffic = function(bbox)
	{
		if(map.getZoom() < 12 && !maxFC1) 
		{
			group.removeAll();
			return;
		}
		
		var mapBoundingBox= map.getViewModel().getLookAtData().bounds.getBoundingBox();
		if(mapBoundingBox.getWidth() > 10 || mapBoundingBox.getHeight() > 10)
		{
			var center = map.getCenter(),
				top = center.lat + 5,
				left = center.lng - 5,
				bottom = center.lat - 5, 
				right = center.lng + 5;
				
			bbox = new H.geo.Rect(top, left, bottom, right);
		}
		
		Spinner.showSpinner();
		
		group.removeAll();
		var url = 'http' + (secure ? 's' : '') + '://traffic.api.here.com/traffic/6.2/flow.json?app_id=' + app_id + '&app_code=' + app_code + 
				  '&bbox=' + bbox.getTop() + ',' + bbox.getLeft() + ';' + 
				  bbox.getBottom() + ',' + bbox.getRight() + 
				  '&i18n=true&responseattributes=sh,fc&locationreferences=tmc,shp&units=metric&jsoncallback=updateTraffic' + (maxFC1 ? '&maxfunctionalclass=1' : '');
				  
		
		script = document.createElement("script");
		script.src = url;
		document.body.appendChild(script);
	}
	
	updateTraffic = function(response)
	{
		var i = 0,
			j = 0,
			k = 0,
			l = 0, 
			m = 0,
			n = 0,
			z = 0;
		
		if(response.RWS && response.RWS.length > 0)
		{
			var ebuCountryCode = response.RWS[0].EBU_COUNTRY_CODE,
				extendedCountryCode = response.RWS[0].EXTENDED_COUNTRY_CODE,
				tableId = response.RWS[0].TABLE_ID, 
				rigtSideCountry = getRightSideCountry(ebuCountryCode, extendedCountryCode, tableId);
			
			for(i = 0; i < response.RWS.length; i++)
			{
				if(response.RWS[i].RW)
				{
					for(j = 0; j < response.RWS[i].RW.length; j++)
					{
						if(response.RWS[i].RW[j].FIS)
						{
							for(k = 0; k < response.RWS[i].RW[j].FIS.length; k++)
							{
								if(response.RWS[i].RW[j].FIS[k])
								{
									for(l = 0; l < response.RWS[i].RW[j].FIS[k].FI.length; l++)
									{
										var FI = response.RWS[i].RW[j].FIS[k].FI[l],
											shp, 
											JF,
											CN,
											point;
									
										if(FI.SHP && FI.CF)
										{
											//! TODO why is CF an Array, might this should be changed
											JF = FI.CF[0].JF;
											CN = FI.CF[0].CN;
											
											if(filterConfidence && CN > 0.7)
												continue;
											
											
											for(m = 0; m < FI.SHP.length; m++)
											{
												var debugpoints = new Array(); 
												
												var strip = new H.geo.LineString(),
													//! TODO Hardcoded
													centerGridSizeXReduction = Math.abs(Math.cos(parseFloat(FI.SHP[m].value[0].trim().split(" ")[0].split(",")[0]) * Math.PI / 180.0));
												
												for(n = 0; n < FI.SHP[m].value.length; n++)
												{
													var cpoints = FI.SHP[m].value[n].trim().split(" ");
													
													for(z = 0; z < cpoints.length; z++)
													{
														strip.pushLatLngAlt.apply(strip, cpoints[z].split(',').map(function(item) { return parseFloat(item); }));
													}
												}
												
											
												var fc = parseInt(FI.SHP[m].FC);
												var shiftedStrip = shiftPolyline(strip, rigtSideCountry ? SHIFTRIGHT[fc] : SHIFTLEFT[fc], centerGridSizeXReduction);
												
												var polyline = new H.map.Polyline(shiftedStrip,
												{
													style:
													{
														lineWidth: 5,
														strokeColor: getColorForJF(JF), 
														fillColor: "rgb(0,0,0)"
													}
												});
												
												polyline.$JF = JF;
												polyline.$CN = CN;

												polyline.addEventListener("pointerdown", function(e)
												{
													if(currentBubble)
														ui.removeBubble(currentBubble);
													var html =  '<div>'+
														'<p style="font-family:Arial,sans-serif; font-size:12px;">JamFactor: ' + e.target.$JF +'</p>'+
														'<p style="font-family:Arial,sans-serif; font-size:12px;">Confidence: ' + e.target.$CN +'</p>'+
														'</div>';

													var pos = map.screenToGeo(e.currentPointer.viewportX, e.currentPointer.viewportY);

													currentBubble = new H.ui.InfoBubble(pos, { content: html });
													ui.addBubble(currentBubble);
												});
												group.addObject(polyline);
											}
										}
									}
								}
							}
						}
					}
				}
			}
			map.addObject(group);
		}
		else if(response.type && response.Details)
		{
			var d = document.getElementById("error");
			d.innerHTML = response.Details;
		}
		Spinner.hideSpinner();
	}
	
	getRightSideCountry = function(ebuCountryCode, extendedCountryCode, tableId)
	{
		if(tableId.length == 1)
			tableId = "0" + tableId;
		
		var tmctable = extendedCountryCode + " " + ebuCountryCode + tableId, 
			ret = true;
		
		if( 
			tmctable == "F1 D10" || // Taiwan
			tmctable == "D0 A17" || // South Africa
			tmctable == "E1 C07" || // Great Britain
			tmctable == "E3 242" || // Ireland
			tmctable == "F0 153" || // Australia New South Wales, Australian Capital Territory
			tmctable == "F0 254" || // Australia New South Wales, Australian Capital Territory
			tmctable == "F0 301" || // Australia Victoria
			tmctable == "F0 456" || // Australia Queensland
			tmctable == "F0 557" || // Australia South Australia
			tmctable == "F0 658" || // Australia Western Australia
			tmctable == "F0 759" || // Australia Tasmania
			tmctable == "F0 860" || // Australia Northern Territory
			tmctable == "F0 F05" || // Malaysia
			tmctable == "F1 941" || // New Zealand
			tmctable == "F2 502" || // India - Maharashtra, Madhya Pradesh, Jharkhand, Assam, Odisha, Bihar, Gujarat, West Bengal
			tmctable == "F2 503" || // India - Tamil Nadu, Kerala, Andhra Pradesh, Goa, Karnataka
			tmctable == "F2 504" || // India - Rajasthan, Uttar Pradesh, Delhi, Haryana, Chandigarh, Punjab
			tmctable == "F2 A01" || // Singapore
			tmctable == "F2 C21" || // Indonesia
			tmctable == "F3 219"  	// Thailand
			)
			{
				ret = false;
			}
		return ret; 
	}
	
	shiftPolyline = function(strip, offsetToRightMeter, centerGridSizeXReduction)
	{
		var latLonZ = strip.getLatLngAltArray(),
			shiftedLatLonZ = new Array(), 
			i = 0,
			shiftedStrip = new H.geo.LineString(); 
			
		for(; i < latLonZ.length / 3; i++)
		{
			var i1 = i < latLonZ.length / 3 -1 ? i : i -1, 
				y1 = latLonZ[3 * i1], 
				x1 = latLonZ[3 * i1 + 1], 
				y2 = latLonZ[3 * i1 + 3], 
				x2 = latLonZ[3 * i1 + 4],
				dx = (x2 - x1) * centerGridSizeXReduction,
				dy =  y2 - y1,
				length = Math.sqrt(dx * dx + dy * dy);
			
			if (length == 0)
			{
				length = 0.00001;	
			}
			shiftedLatLonZ[3 * i    ] = latLonZ[3 * i    ] + ((dx * offsetToRightMeter) * -1) / (1.113238715696961 * 100000.0 * length);
			shiftedLatLonZ[3 * i + 1] = latLonZ[3 * i + 1] + (dy * offsetToRightMeter) / (1.113238715696961 * 100000.0 * length * centerGridSizeXReduction);
			shiftedLatLonZ[3 * i + 2] = latLonZ[3 * i + 2];
	  	}
		
		//! TODO why the hell there is no fromLatLngAlt Array()?????? 
		for(i = 0; i < shiftedLatLonZ.length; i+= 3)
		{
			shiftedStrip.pushPoint(new H.geo.Point(shiftedLatLonZ[i], shiftedLatLonZ[i+1]));
		}
		return shiftedStrip;
	}
	
	getColorForJF = function(jamFactor)
	{
		if(jamFactor < 4.0)
			return 'rgb(138,198,144)';
		else if(jamFactor < 6.5)
			return 'rgb(254,212,3)';
		else if(jamFactor < 8.0)
			return 'rgb(254,153,37)';
		else if(jamFactor < 10.0)
			return 'rgb(227,15,56)';
		else if (jamFactor == 10.0 || jamFactor > 10.0)
			return 'rgb(0,0,0)';
	}
	
	function getUrlParameter(param)
	{
		var pageURL = window.location.search.substring(1),
			urlVariables = pageURL.split('&');

		for (var i = 0; i < urlVariables.length; i++){

			var parameterName = urlVariables[i].split('=');
			if (parameterName[0] == param){
				return parameterName[1];
			}
		}
		return null;
	}
</script>
