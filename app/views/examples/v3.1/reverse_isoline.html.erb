<% content_for :title, "Reverse Isoline Routing" %>

<div class="ctrl-panel">
	<span id="toggle-ctrl-panel" class="glyphicon glyphicon-menu-left"></span>
	<div class="form-group">
		<input type="text" class="form-control" id="start" value="Am Kronberger Hang 8, Schwalbach" onkeydown="if (event.keyCode == 13) geocode(document.getElementById('start').value);" autofocus>
	</div>
	<div class="form-group">
		<select id="rangetype" onchange="document.getElementById('rangeunit').innerHTML = this.value == 'time' ? 'min' : 'KM'; calculateReverseFlow(document.getElementById('rangevalue').value); return false;">
			<option value="time" selected>Time</option>
			<option value="distance">Distance</option>
		</select>
		<select id="rangevalue" size="1" onchange="calculateReverseFlow(document.getElementById('rangevalue').value);">
			<option>1</option>
			<option>2</option>
			<option>3</option>
			<option>4</option>
			<option>5</option>
			<option>6</option>
			<option>7</option>
			<option>8</option>
			<option>9</option>
			<option selected>10</option>
			<option>11</option>
			<option>12</option>
			<option>13</option>
			<option>14</option>
			<option>15</option>
			<option>15</option>
			<option>16</option>
			<option>17</option>
			<option>18</option>
			<option>19</option>
			<option>20</option>
			<option>21</option>
			<option>22</option>
			<option>23</option>
			<option>24</option>
			<option>25</option>
		</select>
		<span id="rangeunit">min</span>
	</div>
	<div>
		<label><input type="checkbox" id="traffic" onchange="calculateReverseFlow(document.getElementById('rangevalue').value); return false;" checked> Traffic Enabled?</label>
	</div>
	<tr>
		<td>HLP Service releases which are used in this demo:</td>
		<td>
			<div id="releaseInfoTxt" style="left:0; top:0; z-index: 0;" value="Used Service Releases:/n"></div>
		</td>
	</tr>
</div>

<div id="mapContainer"></div>

<script type="text/javascript">
	/*
	(C) HERE 2019
	*/

	// Check whether the environment should use hi-res maps
	var hidpi = ('devicePixelRatio' in window && devicePixelRatio > 1);

	// check if the site was loaded via secure connection
	var secure = (location.protocol === 'https:') ? true : false;

	var mapContainer = document.getElementById('mapContainer'),

	platform = new H.service.Platform({
		apikey: api_key,
		useHTTPS: secure
	}),
	maptileService = platform.getMapTileService({'type': 'base'}),
	maptypes = platform.createDefaultLayers(hidpi ? 512 : 256, hidpi ? 320 : 72),
	destination,
	shapegroup,
	map = new H.Map(mapContainer, maptypes.vector.normal.map,
		{
			center: center,
			zoom: zoom
		}
	);
	new H.mapevents.Behavior(new H.mapevents.MapEvents(map));

	// Enable the default UI
	var ui = H.ui.UI.createDefault(map, maptypes);

	//add JS API Release information
	releaseInfoTxt.innerHTML+="JS API: 3."+ H.buildInfo().version;

	//add MRS Release information
	loadMRSVersionTxt();

	//helper
	var releaseGeocoderShown = false;
	var releaseRoutingShown = false;
	
	var marker;
	
	window.addEventListener('resize', function() { map.getViewPort().resize(); });
	
	// add long click in map event listener
	map.addEventListener('longpress', handleLongClickInMap);
	
	/********************************************************
	Start/Destination selectin via LongClick in map
	********************************************************/
	function handleLongClickInMap(currentEvent)
	{
		var lastClickedPos = map.screenToGeo(currentEvent.currentPointer.viewportX, currentEvent.currentPointer.viewportY);

		sh = lastClickedPos.lat + "," + lastClickedPos.lng;
		document.getElementById("start").value = sh;
		geocode(sh);
	}


	addMarkerToPosition = function(pos)
	{
		destination = pos;
		if(marker){
			map.removeObject(marker);
		}
		
		marker = new H.map.DomMarker(destination);
			map.addObject(marker);
			map.setCenter(destination);
	}

	// do a Geocode
	geocode = function(term)
	{
		//add Geocoder Release information if not already done
		if (releaseGeocoderShown== false){
			loadGeocoderVersionTxt();
			releaseGeocoderShown = true;
		}
		geoUrl = [
			"http", 
			secure ? "s" : "", 
			"://geocoder.api.here.com/6.2/search.json?",
			"searchtext=",
			term,
			"&maxresults=1",
			"&app_id=",
			app_id,
			"&app_code=",
			app_code,
			"&jsoncallback=",
			"geocallback"
			].join("");

			script = document.createElement("script");
			script.src = geoUrl;
			document.body.appendChild(script);
	}

	geocallback = function(result)
	{
		if(result.Response.View[0].Result[0].Location != null)
		{
			pos = result.Response.View[0].Result[0].Location.DisplayPosition;
		}
		else
		{
			pos = result.Response.View[0].Result[0].Place.Locations[0].DisplayPosition;
		}

		destination = new H.geo.Point(pos.Latitude, pos.Longitude);
		addMarkerToPosition(destination);
		calculateReverseFlow(document.getElementById("rangevalue").value);
	}

	var calculateReverseFlow = function(rangeValue)
	{
		if(destination === undefined)
		{
			document.getElementById('start').value = map.getCenter().lat + "," + map.getCenter().lng;
			addMarkerToPosition(map.getCenter());
		}

		var rangeType = document.getElementById("rangetype").value;

		routeUrl = [
			"https://isoline.route.api.here.com/",
			"routing/",
			"7.2/",
			"calculateisoline.json?",
			"destination=",
			destination.lat,
			",",
			destination.lng,
			"&",
			"mode=fastest;car;traffic:" + (document.getElementById("traffic").checked ? "enabled" : "disabled"),
			"&rangetype=" + rangeType,
			"&",
			"range=",
			rangeValue * (rangeType == "time" ? 60 : 1000),
			"&",
			"linkattributes=sh&",
			"app_code=",
			app_code,
			"&",
			"app_id=",
			app_id,
			"&jsoncallback=reverseFlowCallback"].join("");

			script = document.createElement("script");
			script.src = routeUrl;
			document.body.appendChild(script);
	}

	var reverseFlowCallback = function(result)
	{

		//add Routing Release number if not already done
		if (releaseRoutingShown== false){
			var ver = result.response.metaInfo.moduleVersion;
			releaseInfoTxt.innerHTML+="<br />Routing: " + ver;
			releaseRoutingShown = true;
		}


		if(shapegroup !== undefined)
		{
			map.removeObject(shapegroup);
			shapegroup = null;
		}
		if(!result.response){
			alert("Error: " +result.Details);
			return;
		}

		shapegroup = new H.map.Group();
		var shape = result.response.isoline[0].component[0].shape,
		strip = new H.geo.LineString();

		for (var i = 0; i < shape.length; i++)
		{
			var split = shape[i].trim().split(",");
			if(split.length === 2){
				var lat = parseFloat(split[0]);
				var lon = parseFloat(split[1]);
				strip.pushLatLngAlt( lat, lon, 0);
			}
		}

		var shp = new H.map.Polygon(strip,
			{
				style: { lineWidth: 5, strokeColor: "rgba(34, 204, 34, 0.5)"}
			}
		);

		shapegroup.addObject(shp);
		map.addObject(shapegroup);
		
		map.getViewModel().setLookAtData({
			tilt: 45,
			bounds: shapegroup.getBoundingBox()
		});
	}
</script>
