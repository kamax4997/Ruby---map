<%= javascript_include_tag "geofence-extension" %>
<%= javascript_include_tag "jszip.min.js" %>
<%= javascript_include_tag "center-utils.js" %>
<%= javascript_include_tag "wellknown.js" %>

<% content_for :title, "GFE Geofencing Demo: Asset in Fence?" %>
<style>
  li {
    list-style-type: square;
    font-size: medium;
  }

  a {
    color: #00ACDC;
  }

  .caption {
    background: rgba(0, 85, 170, 0.6);
    border: 0.1em solid white;
    border-radius: 0.2em;
    color: white;
    font-family: sans-serif;
    font-size: medium;
    font-weight: bold;
    padding: 0.2em;
  }

  .distance {
    background: rgba(0, 85, 170, 0.6);
    border: 0.05em solid white;
    border-radius: 0.1em;
    color: white;
    font-style: italic;
    font-family: sans-serif;
    font-size: smaller;
    padding: 0.1em;
  }
</style>
<div class="ctrl-panel">
  <span id="toggle-ctrl-panel" class="glyphicon glyphicon-menu-left"></span>

  <h4>First upload some Geofences by either</h4>

  <ul>
    <li><a href="./gfe_draw_upload_layer">drawing them on the map</a></li>
    <!--li>
      <a href="/sample_data/sampleRect_50_8.zip" download="sampleRect_50_8.zip">Upload sample "Oestrich"</a>
    </li>
    <li>
      <a href="/sample_data/sampleWktRects.zip" download="sampleWktRects.zip">Upload sample "Ruedesheim"</a>
    </li-->
    <li><a href="#advanced-options" data-toggle="collapse">uploading existing layer (advanced)</a></li>
  </ul>

  <h4>Click on the map to position virtual asset</h4>
  <p>Once the virtual asset is positioned, Geofeicing Extension will be called and matching Geofences within given search radius will show on the map.</p>
  <div class="form-horizontal">
    <div class="form-group">
      <label class="control-label col-sm-4" for="maxDistance">Search Radius:</label>
      <div class="col-sm-8">
        <input class="form-control input-wide" type="number" id="maxDistance" value="250" autocomplete="off">
        <div>(meters)</div>
      </div>

    </div>
    <ul class="legend">
      <li style="color: rgba(  0, 150, 0, 1)">Asset in Fence (border outside search radius)</li>
      <li style="color: rgba(  0, 255, 0, 1)">Asset in Fence (border within search radius)</li>
      <li style="color: rgba(230, 200, 0, 1)">Nearby Fence (distance < search radius)</li>
    </ul>
  </div>

  <h4><a href="#advanced-options" data-toggle="collapse" aria-expanded="false">Advanced... (click to toggle)</a></h4>
  <div class="form-horizontal collapse" id="advanced-options">
    <div class="form-group">
      <label class="control-label col-sm-4" for="geocodeInput">Geocode to Location</label>
      <div class="col-sm-8">
        <input class="form-control input-wide" type="text" id="geocodeInput" size="25" value="Frankfurt, DE" onkeyup="event.keyCode === 13 && geocode(this.value);"/>
        <div>(press Enter to Geocode to location)</div>
      </div>
    </div>
    <div class="form-group">
      <label class="control-label col-sm-4" for="layerId">Geofence Layer Id</label>
      <div class="col-sm-8">
        <input class="form-control input-wide" type="text" id="layerId">
        <div>(set before uploading, value will be used for searching)</div>
      </div>
    </div>

    <div class="form-group">
      <label class="control-label col-sm-4" for="labelAttributes">Label Attributes:</label>
      <div class="col-sm-8">
        <input class="form-control input-wide" type="text" id="labelAttributes" value="" autocomplete="off">
        <div>(comma separated, optional, used when searching)</div>
      </div>
    </div>
    <div class="form-group">
      <label class="control-label col-sm-4" for="gfeUrl">Custom GFE engine endpoint:</label>
      <div class="col-sm-8">
        <input class="form-control input-wide" type="text" id="gfeUrl" value="https://cle.api.here.com/2" autocomplete="off">
        <div>(will be used for upload and search)</div>
      </div>
    </div>
    <div class="form-group">
      <label class="control-label col-sm-4">Upload custom Geofences</label>
      <div class="col-sm-8">
        <input type="file" onchange="uploadLayer(this.files[0]);">
        <div>(plain TSV with WKT column or zipped shapefile)</div>
      </div>
    </div>
  </div>
  <div class="form-group">
    <label for="logArea">Response Log:</label>
    <textarea class="form-control" id="logArea" cols="50" rows="6" autocomplete="off"></textarea>
  </div>

</div>

<div id="mapContainer"></div>

<script type="text/javascript">
  /**
   * @author Michele Comignano
   * @copyright (C) HERE 2015
   * // author asadovoy
	// (C) HERE 2019 -> migrate to 3.1
   */

  var centerLat = 41.36162042312592;
  var centerLon = 2.1376044225728776;

  // Prefill values from URL if passed.
  (function setValuesFromUrl() {
    var indexOf = window.location.href.indexOf('?');
    if (indexOf < 0) return;
    var vars = window.location.href.slice(indexOf + 1).split('&');

    for (var i = 0; i < vars.length; i++) {
      nameVal = vars[i].split('=');
      var paramName = nameVal[0];
      if (!paramName) continue;
      var paramValue = nameVal[1];
      if (paramName === 'lat') centerLat = paramValue;
      if (paramName === 'lon') centerLon = paramValue;
	   if (paramName === 'app_id') app_id = paramValue;
      if (paramName === 'app_code') app_code = paramValue;
      var elementById = document.getElementById(paramName);
      if (elementById) {
        elementById.value = decodeURIComponent(paramValue);
      }
    }

  })();


  var boundingCircleInsidePolygonOptions = {
    style: {
      fillColor: 'rgba(0, 150, 0, 0.8)',
      lineWidth: 0
    }
  };

  var assetInsidePolygonOptions = {
    style: {
      fillColor: 'rgba(0, 255, 0, 0.8)',
      lineWidth: 0
    }
  };

  var boundingCircleIntersectsPolygonOptions = {
    style: {
      fillColor: 'rgba(230, 200, 0, 0.3)',
      lineWidth: 0
    }
  };

  var circleOptions = {
    style: {
      fillColor: 'rgba(0, 0, 0, 0.0)',
      lineWidth: 2,
      strokeColor: 'red'
    }
  };

  var distanceOptions = {
    style: {
      fillColor: 'rgba(0, 0, 0, 0.0)',
      lineWidth: 2,
      lineDash: [5, 5],
      strokeColor: 'red'
    }
  };

  
  // check if the site was loaded via secure connection
  var secure = (location.protocol === 'https:') ? true : false;

  // Create a platform object to communicate with the HERE REST APIs
  var platform = new H.service.Platform({
	apikey: api_key,
	useHTTPS: secure
  });
  maptypes = platform.createDefaultLayers();

  // Instantiate a map in the 'map' div, set the base map to normal
  var DEFAULT_LAYER = 20180123;//quick fix for working Demo
  var layerIdElement = document.getElementById('layerId');

  if (!layerIdElement.value) {
    layerIdElement.value = DEFAULT_LAYER;
  }
  var defaultCenter = new H.geo.Point(centerLat, centerLon);
  var defaultZoom = 13;
  var map = new H.Map(document.getElementById('mapContainer'), maptypes.vector.normal.map, {
    center: defaultCenter,
    zoom: defaultZoom,
    pixelRatio: window.devicePixelRatio || 1
  });

  // Enable the map event system
  var mapevents = new H.mapevents.MapEvents(map);

  // Enable map interaction (pan, zoom, pinch-to-zoom)
  var behavior = new H.mapevents.Behavior(mapevents);

  // Enable the default UI
  var ui = H.ui.UI.createDefault(map, maptypes);

  //add JS API Release information
  <!-- releaseInfoTxt.innerHTML += "JS API: 3." + H.buildInfo().version; -->

  //add MRS Release information
  <!-- loadMRSVersionTxt(); -->

  window.addEventListener('resize', function () {
    map.getViewPort().resize();
  });

  var geocoder = platform.getGeocodingService();

  var logArea = document.getElementById('logArea');
  logArea.log = function (str) {
    logArea.value += str + '\n';
    logArea.scrollTop = logArea.scrollHeight;
  };

  var circle;

  map.addEventListener('tap', callCheckPositionChanged);

  function callCheckPositionChanged(e) {

    var p = map.screenToGeo(e.currentPointer.viewportX, e.currentPointer.viewportY);
    var searchRadius = document.getElementById('maxDistance').value;
    var options = {
      search_radius: searchRadius,
      geom: 'local'
    };
    map.removeObjects(map.getObjects());
    circle = new H.map.Circle(p, searchRadius, circleOptions);
    map.addObject(circle);
    map.addObject(circle);
    map.addObject(new H.map.Marker(p));
    var gfe = platform.ext.getGeoFencingServiceCustom(document.getElementById('gfeUrl').value, 'gfe on maps not used');
    gfe.checkProximity(layerIdElement.value, p, options, onCheckPositionChanged);
  }

  function addPolygonToMap(poly, options) {
    var polygonStrip = new H.geo.LineString();
    var borderStrips = [new H.geo.LineString()];
    for (var k = 0; k < poly.length - 1; k++) {
      polygonStrip.pushPoint(new H.geo.Point(poly[k][1], poly[k][0]));
      borderStrips[borderStrips.length - 1].pushPoint(new H.geo.Point(poly[k][1], poly[k][0]));
      if (poly[k][2] === 'artificial') {
        borderStrips.push(new H.geo.LineString());
      }
    }
    // If the polygon was joining in non artificial points.
    if (k > 0 && !poly[k][2] && !poly[0][2]) {
      borderStrips[borderStrips.length - 1].pushPoint(new H.geo.Point(poly[k][1], poly[k][0]));
    }

    var polygon = new H.map.Polygon(polygonStrip, options);
    map.addObject(polygon);
    for (var i = 0; i < borderStrips.length; i++) {
      var borderStrip = borderStrips[i];
      if (borderStrip.getPointCount() <= 1) continue;
      map.addObject(new H.map.Polyline(borderStrip));
    }
    return calculateCentroid(polygonStrip);
  }

  function addPointToMap(point, options) {
    map.addObject(new H.map.Marker(new H.geo.Point(point[1], point[0], options)));
    return [new H.geo.Point(point[1], point[0]), 0];
  }

  function addLineToMap(line, options) {// TODO handle multiline
    var lineStrip = new H.geo.LineString();
    for (var k = 0; k < line.length; k++) {
      if (line[k] === 'artificial') continue;// our extension to geojson
      lineStrip.pushPoint(new H.geo.Point(line[k][1], line[k][0]));
    }
    map.addObject(new H.map.Polyline(lineStrip));
    return calculateCentroid(lineStrip);
  }


  function onCheckPositionChanged(resp, assetPosition, err) {
    if (err) {
      logArea.log('ERROR!: ' + resp.issues[0].message + '[' + resp.error_id + ']');
      return;
    }
    //var keys = [];
    var geometryResponse = null;
    if (resp.polygons != null) {
      geometryResponse = resp.polygons
    } else {
      geometryResponse = resp.geometries;
    }
    var centroids = [];
    var respLength = geometryResponse.length;
    for (var i = 0; i < respLength; i++) {
      var geom = parseWKT(geometryResponse[i].geometry);
      var dist = geometryResponse[i].distance;
      //keys.push(geometryResponse[i].attributes[getLabelAttributes()] + ' (' + dist + ')');
      centroids[i] = [];
      for (var j = 0; j < geom.coordinates.length; j++) {
        switch (geom.type) {
          case 'MultiPolygon':
            for (var k = 0; k < geom.coordinates[j].length; k++) {
              var style;
              if (dist === -99999999) {
                style = boundingCircleInsidePolygonOptions;
              } else if (dist < 0) {
                style = assetInsidePolygonOptions;
              } else {
                style = boundingCircleIntersectsPolygonOptions;
              }
              centroids[i].push(addPolygonToMap(geom.coordinates[j][k], style));
            }
            break;
          case 'MultiPoint':
            centroids[i].push(addPointToMap(geom.coordinates[j][0]), boundingCircleIntersectsPolygonOptions);
            break;
          case 'MultiLineString':
            centroids[i].push(addLineToMap(geom.coordinates[j]), boundingCircleIntersectsPolygonOptions);
            break;
          default:
            window.alert('Cannot draw matching geometry.');
        }
      }
    }
    // Draw distance lines then so they are over.
    for (var i = 0; i < respLength; i++) {
      var dist = geometryResponse[i].distance;
      addLineToNearestPoint(assetPosition, geometryResponse[i].nearestLat, geometryResponse[i].nearestLon, dist);
    }
    var labels = getLabelAttributes().split(",");
    logArea.log(respLength + (respLength === 1 ? ' match: ' : ' matches: '));
    // Draw geometry captions then so they are over.
    for (var i = 0; i < respLength; i++) {
      var label = "";
      for (var j = 0; j < labels.length; j++) {
        if (typeof geometryResponse[i].attributes[labels[j].trim()] !== "undefined")
          label = label + geometryResponse[i].attributes[labels[j].trim()] + ' ';
        else if(typeof geometryResponse[i].attributes.NAME !== "undefined")
		  label = label + geometryResponse[i].attributes.NAME.trim() + ' ';
		else
          logArea.log("WARNING: Attribute " + labels[j] + " doesn't exist!");
      }
      addGeometryCaption(calculateWeightedCentroid(centroids[i]), label);
      logArea.log(label + '(' + centroids[i][0][0].lat.toFixed(5) + ',' + centroids[i][0][0].lng.toFixed(5) + ')');
    }
    // Keep the circle on top.
    map.removeObject(circle);
    map.addObject(circle);


  }

  function addGeometryCaption(p, caption) {
    var markerElement = document.createElement('div');
    markerElement.className = 'caption';
    markerElement.innerHTML = caption;
    map.addObject(new H.map.DomMarker(p, {
      icon: new H.map.DomIcon(markerElement)
    }));
  }


  function addLineToNearestPoint(assetPosition, fenceLat, fenceLon, distance) {
    if (distance === -99999999) {
      // Cannot draw because distance is not available.
      return;
    }
    var strip = new H.geo.LineString();
    strip.pushPoint(assetPosition);
    strip.pushPoint({lat: fenceLat, lng: fenceLon});
    map.addObject(new H.map.Polyline(strip, distanceOptions));
    var markerElement = document.createElement('div');
    markerElement.className = 'distance';
    markerElement.innerHTML = distance;
    map.addObject(new H.map.DomMarker({
      lat: (assetPosition.lat + fenceLat) / 2,
      lng: (assetPosition.lng + fenceLon) / 2
    }, {icon: new H.map.DomIcon(markerElement)}));
  }

  function getLabelAttributes() {
    return document.getElementById('labelAttributes').value;
  }

  function uploadLayer(file) {
    var layerId = layerIdElement.value;
    if (layerId == DEFAULT_LAYER) {
      logArea.log("Please don't overwrite the default layer");
      return;
    }
    var reader = new FileReader();
    reader.fileName = file.name;
    reader.readAsBinaryString(file);
    reader.onload = function (e) {
      var content;
      if (reader.fileName.indexOf(".zip", reader.fileName.length - 4) !== -1) {
        content = btoa(reader.result);
      } else {
        var zip = new JSZip();
        zip.file(reader.fileName, reader.result);
        content = zip.generate({type: "base64", compression: "DEFLATE", compressionOptions: {level: 6}});
      }
      var gfe = platform.ext.getGeoFencingServiceCustom(document.getElementById('gfeUrl').value, 'gfe on maps not used');
      gfe.uploadLayerCLE(layerId, content, uploadLayerCallback);
    };
  }

  function uploadLayerCallback(resp, err) {
    if (err) {
      logArea.log('ERROR!: ' + resp.issues[0].message + '[' + resp.error_id + ']');
      console.error(resp);
      return;
    }
    logArea.log("Layer submitted.");
  }

  // Geocode support.

  function geocode(searchText) {
    geocoder.geocode({
      searchText: searchText,
      additionalData: 'IncludeShapeLevel,default'
    }, function (result) {
      try {
        var pos = result.Response.View[0].Result[0].Location.DisplayPosition;
        map.setCenter(new H.geo.Point(pos.Latitude, pos.Longitude));
      } catch (err) {
        window.alert('Could not find location specified location.');
      }

    }, function (error) {
      alert(error);
    });
  }
</script>
