<%= javascript_include_tag "traffic-icons" %>

<% content_for :title, "PDE: Display Traffic Signs along Route" %>

<div class="ctrl-panel">
	<span id="toggle-ctrl-panel" class="glyphicon glyphicon-menu-left"></span>
	<p id="mapReleaseTxt">After route calculation, additional info is retrieved from PDE Web Service and displayed.</p>
	<table border="0">
		<tr>
			<td>Start</td><td><input type='text' id='start' class='form-control' size='50' value='八潮市 浮塚'/></td>
		</tr>
		<tr>
			<td>via</td><td><input type='text' id='via' class='form-control' size='50' value='江東区 北砂'/></td>
		</tr>
		<tr>
			<td>Destination</td><td><input type='text' id='dest' class='form-control' size='50' value='品川区 上大崎'/></td>
		</tr>
	</table>
	<input type="submit" id="routeButton" class="btn btn-default btn-sm" value="Calculate Route">
	<div id="feedbackTxt" style="left:0; top:0; z-index: 0;"></div>
	<div id="resultArea" style="display:none"></div>
	<div>HLP Service releases which are used in this demo:</div>
	<div id="releaseInfoTxt" style="left:0; top:0; z-index: 0;"></div>
</div>

<div id="mapContainer"></div>
<script type="text/javascript">

	/*
	* author domschuette,
    * Alex Sadovoy
	* (C) HERE 2014-2019
	*/

	
	const pdeFleetUrl = 'https://fleet.ls.hereapi.com/1/';
	// check if the site was loaded via secure connection
	var secure = (location.protocol === 'https:') ? true : false;

	var
        mapContainer = document.getElementById('mapContainer'),

        platform = new H.service.Platform({
            apikey: api_key_jp,
            useHTTPS: secure
        }),
        maptypes = platform.createDefaultLayers();
    var omvService = platform.getOMVService({path:  'v2/vectortiles/core/mc'});
    var baseUrl = 'https://js.api.here.com/v3/3.1/styles/omv/oslo/japan/';
    // create a Japan specific style
    var style = new H.map.Style(`${baseUrl}normal.day.yaml`, baseUrl);

    // instantiate provider and layer for the basemap
    var omvProvider = new H.service.omv.Provider(omvService, style);
    var omvlayer = new H.map.layer.TileLayer(omvProvider, {max: 22});

    var center = new H.geo.Point(35.68066, 139.8355);

    var
        geocoder = platform.getSearchService(),
        router = platform.getRoutingService(null, 8),
        group = new H.map.Group(),
        map = new H.Map(mapContainer, omvlayer,
            {
                center: center,
                zoom: zoom,
                pixelRatio: window.devicePixelRatio || 1
            }
        );
	map.getViewModel().setLookAtData({
		tilt: 15
	});

	// Do not draw under control panel
	map.getViewPort().setPadding(0, 0, 0, $('.ctrl-panel').width());

	// add behavior control
	new H.mapevents.Behavior(new H.mapevents.MapEvents(map));

	// add UI
	var ui = H.ui.UI.createDefault(map, maptypes);

	//add JS API Release information
	releaseInfoTxt.innerHTML+="<br />JS API: 3."+ H.buildInfo().version;
	//add MRS Release information
	loadMRSVersionTxt();
	//helper
	var releaseGeocoderShown = false;
	var releaseRoutingShown = false;

	// add long click in map event listener
	map.addEventListener('longpress', handleLongClickInMap);

	window.addEventListener('resize', function() { map.getViewPort().resize(); });

	var layers = new Object();
	layers["TRAFFIC_SIGN_FC"] = {callback: pdeResponse};
	
	var signs = {};

	var	routeButton  = document.getElementById("routeButton"),
	start        = document.getElementById("start"      ),
	dest         = document.getElementById("dest"       ),
	mapReleaseTxt  = document.getElementById("mapReleaseTxt"),
	pointA,
	pointB,
	pointV,
	pdeManager = new PDEManager(null, null, layers, api_key_jp),
	currentBubble,
	numLinksMatched = 0,
	bLongClickUseForStartPoint = true,
	routeLinksMap;
	
	/********************************************************
	Start/Destination selectin via LongClick in map
	********************************************************/
	function handleLongClickInMap(currentEvent)
	{
		var lastClickedPos = map.screenToGeo(currentEvent.currentPointer.viewportX, currentEvent.currentPointer.viewportY);
		geocode(lastClickedPos.lat + "," + lastClickedPos.lng, bLongClickUseForStartPoint);
		if(!bLongClickUseForStartPoint)
		{
			document.getElementById("dest").value = lastClickedPos.lat + "," + lastClickedPos.lng;
			group.removeAll();
		}
		else
		{
			document.getElementById("start").value = lastClickedPos.lat + "," + lastClickedPos.lng;
		}
		bLongClickUseForStartPoint = bLongClickUseForStartPoint ? false : true; 
	}

	routeButton.onclick = function ()
	{
		pointA = null; 
		pointB = null;
		pointV = null;
		group.removeAll();
		geocode(start.value, "start");
	};

	var geocode = function(searchTerm, which)
	{
		//add Geocoder Release information if not already done
		if (releaseGeocoderShown== false){
			//loadGeocoderVersionTxt();
			releaseGeocoderShown = true;
		}
		geocoder.geocode(
			{
				q: searchTerm,
			},
			function(result) {
				var item = result.items[0]
				pos = item.position
				point = new H.geo.Point(pos.lat, pos.lng);

				if(which == "start")
				{
					pointA = point;
					p = pointA;
				}else if(which == "dest"){
					pointB = point;
					p = pointB;
				}else{
					pointV = point;
					p = pointV;
				}
				line1 = pos.lat + " " + pos.lng;
				line2 = item.address.label || line1;

				marker = new H.map.DomMarker(p,
					{
						icon: createIconMarker(line1, line2)
					});
					group.addObject(marker);
					if(which == "start")
						geocode(dest.value, "dest");
					else if(pointA && pointB && !pointV && document.getElementById("via").value == "")
						calculateRoute(pointA, pointB);
					else if(pointA && pointB &&  !pointV && document.getElementById("via").value != "")
						geocode(document.getElementById("via").value, "via")
					else if(pointA && pointB && pointV)
						calculateRoute(pointA, pointB, pointV);
			},
			function(error) {
				alert(error);
			}
		);
	}

	var calculateRoute = function(start, destination, via){
		signs = {};
		console.log("start, destination, via:", start, destination, via);
		
		var routeRequestParams = {
			routingMode: 'fast',
			transportMode: 'car',
			departureTime: 'any',
			origin: [start.lat, start.lng].join(","),
			via: new H.service.Url.MultiValueQueryParameter([ [via.lat, via.lng].join(",") ]),
			destination: [destination.lat, destination.lng].join(","),
			return: 'polyline,turnByTurnActions,actions,instructions,travelSummary',
			spans: 'segmentId'
		};

		router.calculateRoute(
			routeRequestParams,
			parseResponse,
			function(error) {
				alert(error);
			}
		);

		
		/*var urlRoutingReq =
		["https://route.",
			"api.here.com/routing/7.2/calculateroute.json?",
			"jsonAttributes=1&",
			"waypoint0=",
			start.lat,
			",",
			start.lng,
			"&waypoint1=",
			via ? via.lat : destination.lat,
			",",
			via ? via.lng : destination.lng,
			via ? "&waypoint2=" : "",
			via ? destination.lat : "", 
			via ? "," : "",
			via ? destination.lng : "",
			"&representation=overview",
			"&routeattributes=sc,sm,sh,bb,lg,no,shape",
			"&legattributes=li",
			"&linkattributes=sh,nl,fc",
			"&mode=fastest;car;traffic:enabled",
			"&app_id=",
			app_id,
			"&app_code=",
			app_code,
			"&jsoncallback=parseResponse"].join("");

			feedbackTxt.innerHTML = urlRoutingReq;
			script = document.createElement("script");
			script.src = urlRoutingReq;
			document.body.appendChild(script);*/
	}


	// parse the routing response
	var parseResponse = function (resp)
	{
		if (resp.error != undefined)
		{
			alert (resp.error);
			feedbackTxt.innerHTML = resp.error;
			return;
		}
		/*if (resp.response == undefined)
		{
			console.log("resp.response:", resp.response);
			alert (resp.subtype + " " + resp.details);
			feedbackTxt.innerHTML = resp.error;
			return;
		}*/
		//add Routing Release number if not already done
		if (releaseRoutingShown == false){
			/*releaseInfoTxt.innerHTML+="<br />HLP Routing: "+resp.response.metaInfo.moduleVersion;
			routerMapRelease = resp.response.metaInfo.mapVersion;
			mapReleaseTxt.innerHTML = "HLP Routing Service based on "+routerMapRelease+ " map release";
			releaseRoutingShown = true;*/
		}
		var
			route = resp.routes[0],
			linestring = [];
			//arrTrace = ["LATITUDE,LONGITUDE"]
			arrSegIds = [];
		route.sections.forEach((section) => {
			// decode LineString from the flexible polyline
			var routeLine = H.geo.LineString.fromFlexiblePolyline(section.polyline).getLatLngAltArray();
			linestring = [...linestring, ...routeLine];
			/*for(var i=0, len=routeLine.length; i<len; i+=3){
				arrTrace.push([routeLine[i], routeLine[i+1]].join(","));
			}*/
			let spans = section.spans;
			spans.forEach((span) => {
				let s = span.topologySegmentId.split(":")
				arrSegIds.push(s[s.length - 1]);
			});
			//console.log("linestring:", arrTrace);
		});
		topoSegments2linkIds(arrSegIds, (linkIds) => {
			console.log("linkIds+++:", linkIds);
			return;
			var url = [pdeFleetUrl, 'index.json?layer=ROAD_GEOM_FCn&attributes=LINK_ID&values=', linkIds.join(),
				'&apikey=',
				api_key_jp
			].join('');
			/*$.ajax({
				url: url,
				dataType: "json",
				async: true,
				type: 'get',
				success: (resp) => {
					console.log("linksGEOM:", resp);
				},
				error: function(xhr, status, e) {
					console.log("xhr:", xhr);
					console.log("status:", status);
					console.log("e:", e);
				}
			});*/
			var geomLayer = new Object();
			geomLayer["ROAD_GEOM_FC"] = {
				callback: (geomResp) => {
					console.log("linksGEOM:", geomResp);
				}
			};
			var pdeM = new PDEManager(null, null, geomLayer, api_key_jp);
			pdeM.setLinks([
				{linkId: "-781655680", shape: ["", ""], functionalClass: 2},
				{linkId: "-781655679", shape: ["", ""], functionalClass: 2}
			]);
			//pdeManager.setBoundingBoxContainer(group);
			//pdeM.setOnTileLoadingFinished((r) => {});
			pdeM.start();
		});

		/*$.ajax({
                url: "https://fleet.ls.hereapi.com/2/calculateroute.json?routeMatch=1&mode=fastest;car;traffic:disabled&apikey=" + api_key_jp,
                dataType: "json",
                async: true,
                type: 'post',
				data: arrTrace.join("\n"),
				contentType: 'application/octet-stream',
                success: function(resp) {
					console.log("rme:", resp);
								var links = [];
					for(var i = 0; i < resp.response.route[0].leg.length; i++)
						links = links.concat(resp.response.route[0].leg[i].link);
					console.log("links:", links);
					pdeManager.setLinks(links);
					pdeManager.setBoundingBoxContainer(group);
					pdeManager.setOnTileLoadingFinished(pdeManagerFinished);
					pdeManager.start();
                    //gotRouteMatchResponse(data);
                },
                error: function(xhr, status, e) {
                    alert((xhr.responseJSON.issues[0].message ? xhr.responseJSON.issues[0].message :  xhr.responseJSON.issues[0] ) || xhr.responseJSON);
                }
            });*/

		/*var strip = new H.geo.LineString(),
		shape = resp.response.route[0].shape,
		i,
		l = shape.length;

		for(i = 0; i < l; i++)
		{
			strip.pushLatLngAlt.apply(strip, shape[i].split(',').map(function(item) { return parseFloat(item); }));
		}*/

		polyline = new H.map.Polyline(new H.geo.LineString(linestring),
			{
				style:
				{
					lineWidth: 5,
					strokeColor: "rgba(18, 65, 145, 0.7)",
					lineJoin: "round"
				}
			});
		console.log("parseResponse:", resp, linestring);


			group.addObject(polyline);
			//map.addObject(group);

	}

	function topoSegments2linkIds(segments, clbk){
		var
			pdeFleetUrl = pdeFleetUrl || 'https://fleet.ls.hereapi.com/1/',
			topoReqs = [];
		// Generate URL.
		const halfSegmentsLen = Math.ceil(segments.length / 2)
		let fseg = segments.slice(0, halfSegmentsLen);
		segments.slice(halfSegmentsLen + 1);
		var url = [pdeFleetUrl, 'index.json?layer=TOPO_SEG_LINK_FCn&attributes=TOPOLOGY_ID&values=', fseg.join(),
				'&apikey=',
				api_key_jp
			].join('');
		// Send request.
		$.ajax({
                url: url,
                dataType: "json",
                async: true,
                type: 'get',
                success: function(resp) {
					console.log("topoSegments2linkIds:", resp);
					var
						layers = resp.Layers,
						allLayers = ["TOPO_SEG_LINK", "ROAD_GEOM"];
						topoLevels = [],
						topoLayers = [],
						topoTileXY = [],
						nT = 0, endFc = false, endLr = false;
						//topoReq = {topoLevels: [], topoLayers: [], topoTileXY: [], resp: false},
					for (let i=0; i<layers.length; i++) {
						let
							layer = layers[i].layer,
							aFc = layer.split("_"),
							fc = aFc[aFc.length - 1],
							level = layers[i].level,
							tileXYs = layers[i].tileXYs;
							console.log("i:", i);
							if(i == (layers.length-1)){
								endFc = true;
							}
						endLr = false;
						for (let i=0; i<allLayers.length; i++) {
							let	layer = allLayers[i] + "_" + fc;
							console.log("layer:", layer, i);
							if(i == (allLayers.length-1)){
								endLr = true;
							}
							for (let i=0; i<(tileXYs.length+1); i++,nT++){
								console.log("tileXYs i:", i);
								if((nT !=0 && (nT % 64) == 0) || (i == tileXYs.length && endFc && endLr)){
									console.log("topoLevels count:", topoLevels.length, endFc, endLr);
									topoReqs.push({
										topoLayers: [...topoLayers],
										topoLevels: [...topoLevels],
										topoTileXY: [...topoTileXY],
										linkIds: false
									});
									nT = 0;
									topoLevels = [];
									topoLayers = [];
									topoTileXY = [];
								}
								if(i == tileXYs.length) break;
								topoLayers.push(layer);
								topoLevels.push(level);
								topoTileXY.push(tileXYs[i].x);
								topoTileXY.push(tileXYs[i].y);
							}
						}
					}
					console.log("topoReqs:", topoReqs);
					for (let i=0; i<topoReqs.length; i++) {
						let topoReq = topoReqs[i];
						var url = [pdeFleetUrl,'tiles.json?layers=', topoReq.topoLayers.join(),
								'&meta=', 1,
								'&levels=', topoReq.topoLevels.join(),
								'&tilexy=', topoReq.topoTileXY.join(),
								'&apikey=', api_key_jp
							].join('');
						$.ajax({
							url: url,
							dataType: "json",
							async: true,
							type: 'get',
							success: onTopologyResp.bind({nReq: i}),
							error: function(xhr, status, e) {
								console.log("xhr:", xhr);
								console.log("status:", status);
								console.log("e:", e);
							}
						});
					}
					//console.log("topoLayers64:", topoLayers64, topoLevels64, topoTileXY64);
					// Generate URL.

                },
                error: function(xhr, status, e) {
					console.log("xhr:", xhr);
					console.log("status:", status);
					console.log("e:", e);
                    //alert((xhr.responseJSON.issues[0].message ? xhr.responseJSON.issues[0].message :  xhr.responseJSON.issues[0] ) || xhr.responseJSON);
                }
		});
			/*script = document.createElement("script");
			script.src = url;
			document.body.appendChild(script);*/
		
		function processIndexResponseTopo(resp){
			var
				layers = resp.Layers,
				topoLevels = [],
				topoLayers = [],
				topoTileXY = [];
			for (var i=0; i<layers.length; i++) {
				topoLevels.push(layers[i].level);
				topoTileXY.push(layers[i].tileXYs[0].x);
				topoTileXY.push(layers[i].tileXYs[0].y);
				var layer = layers[i].layer;
				topoLayers.push(layer);
			}
		}

		function onTopologyResp(resp) {
			//console.log("this.nReq+:", this.nReq);
			var
				linkIds = {}, linkIdsGeom = {},
				decodeLinkIds = function(LINK_IDS_TXT){
					var LINK_IDS = LINK_IDS_TXT.split(',')
					var linkIdsDecoded = [];
					for(var i=0; i<LINK_IDS.length; i++){
						if(i==0){
							linkIdsDecoded[i] = hexToDec(LINK_IDS[i]);
						}else{
							linkIdsDecoded[i] = linkIdsDecoded[i-1] + hexToDec(LINK_IDS[i]);
						}
					}
					return linkIdsDecoded;
				},
				hexToDec = function(hex) {
					return parseInt(hex, 16);
				};
			for (var t=0; t<resp.Tiles.length; t++){
				let
					tile = resp.Tiles[t],
					layerN = tile.Meta.layerName,
					aFc = layerN.split("_"),
					fc = aFc[aFc.length - 1],
					layer = layerN.replace("_" + fc, "");
				for (var r = 0; r < tile.Rows.length; r++){
					let
						row = tile.Rows[r];
					if(layer == "TOPO_SEG_LINK"){
						let
							link_Ids = row.LINK_IDS,
							dLinkIds = decodeLinkIds(link_Ids).join(",");
						if(segments.indexOf(row.TOPOLOGY_ID) != -1){
							let arrdLinkIds = dLinkIds.split(",");
							for (let i=0; i<arrdLinkIds.length; i++) {
								let linkId = arrdLinkIds[i];
								if(linkId == "774644975"){
									console.log("774644975:", row.TOPOLOGY_ID);
								}
								linkIds[linkId] = linkIds[linkId] || {linkId: linkId};
							}
						}
					}else if(layer == "ROAD_GEOM"){
						let
							linkId = row.LINK_ID,
							arrLat = row.LAT.split(",").map((c) => (c == "" ? "0" : c)),
							arrLng = row.LON.split(",").map((c) => (c == "" ? "0" : c));
							var prevLat = 0, prevLng = 0, shape = [];
						for (let i=0; i<arrLat.length; i++) {
							prevLat = prevLat + parseInt(arrLat[i]);
							prevLng = prevLng + parseInt(arrLng[i]);
							let
								curLat = prevLat / 100000,
								curLng = prevLng / 100000;
							shape.push([curLat, curLng].join(","));
						}
						//console.log("shape:", shape);
						linkIdsGeom[linkId] = linkIdsGeom[linkId] || {linkId: linkId, shape: shape};
					}
				}
			}
			for (const linkId in linkIds) {
				//console.log("linkIdsGeom[linkId]:", linkId, linkIdsGeom[linkId]);
				if(linkIdsGeom[linkId]) {
					linkIds[linkId].shape = linkIdsGeom[linkId].shape;
				}else{
					console.error("linkId:", linkId);	
				}
				
			}
			topoReqs[this.nReq].linkIds = linkIds;
			let fT = topoReqs.filter((r) => !!r.linkIds);
			if(fT.length == topoReqs.length){
				clbk(linkIds);
			}
		}
	}




	function pdeManagerFinished(finishedRequests)
	{
		feedbackTxt.innerHTML = "Done. Requested " + finishedRequests + " PDE tiles for " + numLinksMatched + " route links. ";
		
		var resultHTML = '<table class="pde_table" cellpadding="2" cellspacing="0" border="1" width="90%">' +
						 '<thead>' + 
							'<tr>' +
							'<th width="80%">Sign</th>' +
							'<th width="20%">#</th>' +
							'</tr>' +
						 '</thead>' +
						 '<tbody id="maps_table_body">';

		for(var sign in signs)
		{
			resultHTML += "<tr>" + "<td>" + sign + "</td>" + "<td>" + signs[sign] + "</td>" + "</tr>";
		}
		
		resultHTML += "</tbody>" + "</table>";

		document.getElementById("resultArea").innerHTML = resultHTML;
		document.getElementById("resultArea").style.display = "block";
		
		map.addObject(group);
        //map.setViewBounds(group.getBoundingBox());
        map.getViewModel().setLookAtData({
            bounds: group.getBoundingBox()
        });
	}

	function pdeResponse(respJsonObj)
	{
		console.log("pdeResponse:", respJsonObj, pdeManager.getRouteLinks());
		if (respJsonObj.error != undefined)
		{
			feedbackTxt.innerHTML = respJsonObj.error;
			return;
		}
		if (respJsonObj.responseCode != undefined)
		{
			alert (respJsonObj.message);
			feedbackTxt.innerHTML = respJsonObj.message;
			return;
		}

		feedbackTxt.innerHTML = "Received Attributes info for " + respJsonObj.Rows.length + " (splitted) links";
		for (r = 0; r < respJsonObj.Rows.length; r++)
		{
			var conditionType = respJsonObj.Rows[r].CONDITION_TYPE;
			var signType = respJsonObj.Rows[r].TRAFFIC_SIGN_TYPE == null ? "0" : respJsonObj.Rows[r].TRAFFIC_SIGN_TYPE;
			var linkIds = respJsonObj.Rows[r].LINK_IDS.split(','); // variable speed signs have 2 links, all others just one link
			var linkId = parseInt(linkIds[0]);
			var routeLink = pdeManager.getRouteLinks()[linkId]; // the link, including direction (+/-), must be on the route
			if (routeLink == null)
			{
				continue;
			}
			if (conditionType == 11) // the variable speed sign condition applies only, if both links are on the route, and in the correct direction
			{
				var linkId2 = parseInt(linkIds[1]);
				var routeLink2 = pdeManager.getRouteLinks()[linkId2];
				if (routeLink2 == null)
				{
					continue;
				}
			}

			var strip = new H.geo.LineString(),
			shape = routeLink.shape,
			i,
			l = shape.length;

			for(i = 0; i < l; i+=2)
			{
				strip.pushLatLngAlt.apply(strip, [shape[i], shape[i+1]]);
			}

			if (conditionType == "17") {
					while (signType.length < 3) 
						signType = "0" + signType;
			}
			var trafficSignIdentifier = conditionType + "_" + signType;
			var trafficSign = trafficSigns[trafficSignIdentifier];
			var color = "rgba(255, 10, 50, 0.7)";
				
			if(signs[trafficSign] != undefined)
				signs[trafficSign]++;
			else
				signs[trafficSign] = 1;	

			// For No overtaking don't show icon, instead add polyline 
			if (conditionType == "19") {
				color = "rgba(255, 0, 0, 1)";
				polyline = new H.map.Polyline(strip, {
					style: {
						lineWidth: 5,
						strokeColor: color,
						lineJoin: "round"
					}
				});
				polyline.$CONDITION_ID = respJsonObj.Rows[r].CONDITION_ID;
				polyline.$TRAFFIC_SIGN = trafficSign;
				
				polyline.addEventListener("pointerdown", function(e){
					if (currentBubble) 
						ui.removeBubble(currentBubble);
					var html = '<div>' +
					'<p style="font-family:Arial,sans-serif; font-size:12px;">Condition ID: ' +
					e.target.$CONDITION_ID +
					'</p>' +
					'<p style="font-family:Arial,sans-serif; font-size:12px;">Sign Type: ' +
					e.target.$TRAFFIC_SIGN +
					'</p>' +
					'</div>';
					
					var pos = map.screenToGeo(e.currentPointer.viewportX, e.currentPointer.viewportY);
					
					currentBubble = new H.ui.InfoBubble(pos, {
						content: html
					});
					ui.addBubble(currentBubble);
				});
				
				group.addObject(polyline);
			}
			else {
			
			    // Note: The router returns the geometry points of a link in route driving direction. He doesn't start with the reference node coordinate.
				// If linkID > 0: Driving from ref node. Sign is posted at the non-ref node of the link. Last coordinate returned from router.
				// If linkID < 0: Driving to   ref node. Sign is posted at the     ref node of the link. Last coordinate returned from router.
				var stripArr = strip.getLatLngAltArray();
				var point = new H.geo.Point(stripArr[stripArr.length - 3], stripArr[stripArr.length - 2]);
				
				var signMarker;
			
				
				if (trafficIcons[trafficSignIdentifier + "_eu"]) {
					signMarker = new H.map.Marker(point, {
						icon: trafficIcons[trafficSignIdentifier + "_eu"]
					});
				}
				else {
					signMarker = new H.map.Marker(point, {
						icon: trafficIcons["11_000_eu"]
					});
				}
				// Traffic sign description available in PDE documentation
				
				signMarker.$CONDITION_ID = respJsonObj.Rows[r].CONDITION_ID;
				signMarker.$TRAFFIC_SIGN = trafficSign;
				signMarker.addEventListener("pointerdown", function(e){
					if (currentBubble) 
						ui.removeBubble(currentBubble);
					var html = '<div>' +
					'<p style="font-family:Arial,sans-serif; font-size:12px;">Condition ID: ' +
					e.target.$CONDITION_ID +
					'</p>' +
					'<p style="font-family:Arial,sans-serif; font-size:12px;">Sign Type: ' +
					e.target.$TRAFFIC_SIGN +
					'</p>' +
					'</div>';
					
					var pos = map.screenToGeo(e.currentPointer.viewportX, e.currentPointer.viewportY);
					
					currentBubble = new H.ui.InfoBubble(pos, {
						content: html
					});
					ui.addBubble(currentBubble);
				});
				group.addObject(signMarker);
			}
			numLinksMatched++;
		}
	};


	//--- Helper - Create Start / Destination marker
	var createIconMarker = function (line1, line2) {
        line2 = line2.trim();
		var domElement = document.createElement('div');
		domElement.style.marginTop = "-55px";
		domElement.style.marginLeft = "-27px";
		var svgMarker = svgMarkerImage_Line;

		svgMarker = svgMarker.replace(/__line1__/g, line1);
		svgMarker = svgMarker.replace(/__line2__/g, line2);
		svgMarker = svgMarker.replace(/__width__/g, line2.length  *4);
        svgMarker = svgMarker.replace(/__widthAll__/g, line2.length  *4 + 80);
		domElement.innerHTML = svgMarker;

		return new H.map.DomIcon(domElement);


	};
</script>
