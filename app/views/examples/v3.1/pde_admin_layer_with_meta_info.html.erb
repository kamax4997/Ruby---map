<% content_for :title, "PDE Admin Polygons and Meta Layer in Canvas" %>

<div class="ctrl-panel">
	<span id="toggle-ctrl-panel" class="glyphicon glyphicon-menu-left"></span>
	<p>Using JSAPI Remote Tile Provider</p>
	<div>
		 Admin Level <input type="radio" id="al0" value="0" name="adminLevelRadioButtons" onchange="adminLevelChanged(this);" checked="checked"/>0
					 <input type="radio" id="al1" value="1" name="adminLevelRadioButtons" onchange="adminLevelChanged(this);"                  />1
					 <input type="radio" id="al2" value="2" name="adminLevelRadioButtons" onchange="adminLevelChanged(this);"                  />2
					 <input type="radio" id="al8" value="8" name="adminLevelRadioButtons" onchange="adminLevelChanged(this);"                  />8
					 <input type="radio" id="al9" value="9" name="adminLevelRadioButtons" onchange="adminLevelChanged(this);"                  />9
	</div>
	<div id="sourceTypeLegend"></div>
	<div id="centerCoordinate"></div>
	<div id="releaseInfoTxt" style="left:0; top:0; z-index: 0;" value="No PDE tiles loaded yet"></div>
</div>

<div id="mapContainer"></div>

<script type="text/javascript">
	/* 
		author domschuette
		(C) HERE 2017
	*/
	
	// check if the site was loaded via secure connection
	var secure = (location.protocol === 'https:') ? true : false;

	// Check whether the environment should use hi-res maps
	var hidpi = ('devicePixelRatio' in window && devicePixelRatio > 1);


	// Create a platform object to communicate with the HERE REST APIs
	var platform = new H.service.Platform({
			apikey: api_key,
			useHTTPS: secure
		}),
			configObj = {};


	var maptileService = platform.getMapTileService({'type': 'base'}),
		tileLayer = maptileService.createTileLayer("xbasetile", "normal.night", 256, "png8", configObj),
		adminLevel,
		layer,
		metalayer,
		provider,
		totalPdeTilesLoaded = 0,
		fillStyle_lines = "white";
		fillStyle_text = "#48DAD0";

	// Instantiate a map in the 'map' div, set the base map to normal
	var map = new H.Map(document.getElementById('mapContainer'), tileLayer, {
		center: center,
		zoom: zoom,
		pixelRatio: window.devicePixelRatio || 1
	});

	// Enable the map event system
	var mapevents = new H.mapevents.MapEvents(map);

	// Enable map interaction (pan, zoom, pinch-to-zoom)
	var behavior = new H.mapevents.Behavior(mapevents);
	
	window.addEventListener('resize', function() { map.getViewPort().resize(); });

	map.addEventListener("mapviewchange", function() 
	{ 
		var d = document.getElementById("centerCoordinate"),
			c = map.getCenter(),
			lon = Math.round(c.lng * 100000.0) /100000.0;
			lat = Math.round(c.lat * 100000.0) /100000.0;
			d.innerHTML = "Map center: " + lat + " / " + lon;
	});

	var getPdeTilingLevel = function(adminLevel)
	{
		switch(adminLevel) { // should lookup from https://pde.api.here.com/1/doc/layers.json?app_id=' + app_id + '&app_code=' + app_code --> layer name + tileLevel
			case "0": return  7;
			case "1": return  8;
			case "2": return  9;
			case "8": return 10;
			case "9": return 11;
		}
	};

	var CustomProvider = function(options) 
	{
		this.projection = new H.geo.PixelProjection();
		this.projection.rescale(7);
		this.url = "https://pde.api.here.com/1/tile.json?release=LATEST&layer=ADMIN_POLY_" + adminLevel + "&level=" + getPdeTilingLevel(adminLevel) + "&tilex={$X$}&tiley={$Y$}&app_id=" + app_id + "&app_code=" + app_code;
		this.done = {};
		this.drawStrip.bind(this);
		H.map.provider.RemoteTileProvider.call(this /*, {min: 7, max: 8}*/);
	};

	// inherits is API internal, but it saves time to use it directly
	inherits(CustomProvider, H.map.provider.RemoteTileProvider);

	CustomProvider.prototype.requestInternal = function(x, y, z, onSuccess, onError) 
	{
	this.projection.rescale(z);

	var that = this,
		degSize = 180 / Math.pow(2, getPdeTilingLevel(adminLevel)),
		counter = 0,
		topleft = this.projection.pixelToGeo({x: x * 256,y: y * 256}),
		topLeftXY = [Math.floor((topleft.lng + 180) / degSize), Math.floor((topleft.lat + 90) / degSize)],
		bottomright = this.projection.pixelToGeo({x: x * 256 + 255,y: y * 256 + 255}),
		bottomrightXY = [Math.floor((bottomright.lng + 180) / degSize), Math.floor((bottomright.lat + 90) / degSize)],
		bottomrightColRow = [],
		total = (bottomrightXY[0] - topLeftXY[0] + 1) * (topLeftXY[1] - bottomrightXY[1] + 1);
		xhrs = [];

		for (var i = topLeftXY[0], lenI = bottomrightXY[0]; i <= lenI; i++) {
			for (var k = bottomrightXY[1], lenK = topLeftXY[1]; k <= lenK; k++) {
				var canvas = document.createElement('canvas'),
					ctx = canvas.getContext('2d');
				
				canvas.width = 256;
				canvas.height = 256;
				
				xhrs.push(
					new H.net.Xhr(this.url.replace('{$X$}', i).replace('{$Y$}', k), (function(x, y) {return function(resp) 
					{
						if (resp)
						{
							var rows = JSON.parse(resp).Rows,
								i,
								len = rows.length;
								
							for (i = 0; i < len; i++) 
							{
								that.drawStrip(rows[i].LAT.split(','), rows[i].LON.split(','), that.tileSize * x, that.tileSize * y, ctx, rows[i].SOURCE_TYPE, rows[i].NAME);
							}
						}
						counter++;
						totalPdeTilesLoaded++;
						if (counter == total) {
							releaseInfoTxt.innerHTML = totalPdeTilesLoaded + " PDE tiles loaded";
						}
						counter === total && onSuccess(canvas);
				};}(x, y))));
			}
		};

		return {
			'cancel': function() 
			{
				xhrs.forEach(function(item) 
				{
					item.abort();
				});
			}
		}
	}

	CustomProvider.prototype.drawStrip = function(lats, lons, offsetX, offsetY, ctx, sourceType, name) 
	{
		var parsedLat, parsedLon,
			lastLat = 0, lastLon = 0,
			lat, lon, 
			point,
			coords = new Array(),
			alllines = new Array(),
			textPosY = 0, textPosX = 0;

		for (var i = 0; i < lats.length; i++) {
			if (lats[i] == "") lats[i] = 0;
			if (lons[i] == "") lons[i] = 0;
			lat = parseFloat(lats[i]) / 100000.0 + lastLat;
			lon = parseFloat(lons[i]) / 100000.0 + lastLon;
			lastLat = lat;
			lastLon = lon;
			point = this.projection.geoToPixel({lat: lat, lng: lon});
			textPosX += point.x - offsetX;
			textPosY += point.y - offsetY;
			var g = lons[i].toString();
			if (g.charAt(0) === '-') g = g.substr(1);
			if (g.indexOf("0") === 0 && lons[i] != 0 || g == "00") { // point starts artificial line that is only used for polygon filling
				if (i == 0) continue;
				coords.push(point);
				alllines.push(coords);
				coords = new Array();
				continue;
			}
			coords.push(point);
		}
		alllines.push(coords);
		textPosY /= lats.length;
		textPosX /= lons.length;

		ctx.lineWidth = 2;
		ctx.strokeStyle = fillStyle_lines;
		for (var i = 0; i < alllines.length; i++) {
			ctx.beginPath();
			coords = alllines[i];
			for (var j = 0; j < coords.length; j++)	{
				point = coords[j];
				ctx.lineTo(point.x - offsetX, point.y - offsetY);
			}
			ctx.stroke();
		}

	}

	var adminLevelChanged = function (obj)
	{
		adminLevel = obj.value;
		provider = new CustomProvider({});
		if (layer != undefined)
			map.removeLayer(layer);
		layer = new H.map.layer.TileLayer(provider);
		map.addLayer(layer);
	}
	
	var radioButtons = document.getElementsByName("adminLevelRadioButtons");
	for (var i = 0; i < radioButtons.length; i++) {
		if (radioButtons[i].checked)
			adminLevelChanged(radioButtons[i]);
	}
	
	// Implementation for Meta Layer Rendering
	var MetaProvider = function(options) 
	{
		this.projection = new H.geo.PixelProjection();
		this.projection.rescale(7);

		this.url = "https://{$SERVER$}.base.maps.api.here.com/maptile/2.1/maptile/newest/normal.day/{$Z$}/{$X$}/{$Y$}/256/png8?app_id=" + app_id +  "&app_code="+ app_code + "&metadata=metaonly&mgen=2&lg=eng";
		
		this.done = {};
		H.map.provider.RemoteTileProvider.call(this /*, {min: 7, max: 8}*/);
	};
	
	var hash = {};

	// inherits is API internal, but it saves time to use it directly
	// inherits(MetaProvider, H.map.provider.RemoteTileProvider);

	MetaProvider.prototype.requestInternal = function(x, y, z, onSuccess, onError) 
	{
		this.projection.rescale(z);

		var that = this,
			xhrs = [],
			canvas = document.createElement('canvas'),
			ctx = canvas.getContext('2d');
		
		canvas.width = 256;
		canvas.height = 256;
		var server_rr = 1 + ((y + x) % 4);
		
		xhrs.push(
			new H.net.Xhr(this.url.replace('{$X$}', x).replace('{$Y$}', y).replace('{$Z$}', z).replace('{$SERVER$}', server_rr), (function(x, y) {return function(resp) 
			{
				if (resp)
				{
					var metadata = JSON.parse(resp).metadata;
					for (var key in metadata) 
					{
						var objs = metadata[key];
						for(var i = 0; i < objs.length; i++)
						{
							var curObj = objs[i];
							
							var bboxes = curObj["bounding boxes"],
								box1 = curObj["box 1"],
								box2 = curObj["box 2"],
								name = curObj["name"],
								vertices = curObj["vertices"],
								font_size = curObj["font size"],
								uri = curObj["uri"],
								cci = curObj["city center info"];
								
							// debug	
							if(cci && cci.type)
								hash[cci.type] = true;
							
							if(box1 && box2 && name && cci && cci.type && (cci.type === "NATIONAL CAPITAL"))
							{
								ctx.fillStyle = "#FAB800";
								ctx.fillRect(box1[0],box1[1],box1[2],box1[3]);
								if(font_size)
									ctx.font = font_size + "px Arial";
								else
									ctx.font = "16px Arial";
								ctx.textBaseline = 'top';
								ctx.fillText(name, box2[0], box2[1]);
							}
							else if(box1 && box2 && name && cci && cci.type && (cci.type === "PROVINCIAL CAPITAL"))
							{
								ctx.fillStyle = fillStyle_text;
								ctx.fillRect(box1[0],box1[1],box1[2],box1[3]);
								
								if(font_size)
									ctx.font = font_size + "px Arial";
								else
									ctx.font = "14px Arial";
								ctx.textBaseline = 'top';
								ctx.fillText(name, box2[0], box2[1]);
							}
							else if(box1 && box2 && name && cci && cci.type && (cci.type === "OTHER"))
							{
								ctx.fillStyle = fillStyle_text;
								ctx.fillRect(box1[0],box1[1],box1[2],box1[3]);
								
								if(font_size)
									ctx.font = font_size + "px Arial";
								else
									ctx.font = "11px Arial";
								ctx.textBaseline = 'top';
								ctx.fillText(name, box2[0], box2[1]);
							}
							else if(box1 && name)
							{
								ctx.fillStyle = fillStyle_text;
								if(font_size)
									ctx.font = font_size + "px Arial";
								else
									ctx.font = "8px Arial";
								ctx.textBaseline = 'top';
								ctx.fillText(name, box1[0], box1[1]);
							}
							else if(vertices && name)
							{
								ctx.fillStyle = fillStyle_text;;
								if(font_size)
									ctx.font = font_size + "px Arial";
								else
									ctx.font = "8px Arial";
								ctx.textPath(name, vertices);
							}
							else if(name && (curObj["bounding boxes"][0]["box 1"] || curObj["bounding boxes"][0]["box 2"]) && curObj.type !== "ROADSIGN")
							{
								var box = null;
								
								if(curObj["bounding boxes"][0]["box 1"] && curObj["bounding boxes"][0]["box 2"])
									box = curObj["bounding boxes"][0]["box 2"];
								else if(curObj["bounding boxes"][0]["box 2"])
									box = curObj["bounding boxes"][0]["box 2"]
								else
									box = curObj["bounding boxes"][0]["box 1"];
								
								ctx.fillStyle = fillStyle_text;
								if(font_size)
									ctx.font = font_size + "px Arial";
								else
									ctx.font = "12px Arial";
								ctx.textBaseline = 'top';
								ctx.fillText(name, box[0],box[1]);
							}
						}
					}
				}
				onSuccess(canvas);
		};}(x, y))));

		return {
			'cancel': function() 
			{
				xhrs.forEach(function(item) 
				{
					item.abort();
				});
			}
		}
	}
	
	var metaprovider = new MetaProvider({}),
		metalayer = new H.map.layer.TileLayer(metaprovider);
	map.addLayer(metalayer);

	var adminLevelChanged = function (obj)
	{
		adminLevel = obj.value;
		provider = new CustomProvider({});
		if (layer != undefined)
			map.removeLayer(layer);
		layer = new H.map.layer.TileLayer(provider);
		map.addLayer(layer);
	}
	
	var radioButtons = document.getElementsByName("adminLevelRadioButtons");
	for (var i = 0; i < radioButtons.length; i++) {
		if (radioButtons[i].checked)
			adminLevelChanged(radioButtons[i]);
	}	
	
</script>
