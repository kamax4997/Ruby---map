<%= javascript_include_tag "moment" %>
<%= javascript_include_tag "moment-range" %>
<%= javascript_include_tag "warning.js" %>
<% content_for :title, "Fleet Telematics API" %>

    <style>
        #notecontent a { color: white; }
        #notecontent a:hover { color: red; }
        details { display: none }
        .input-details { display: none }
        .endpoint-details { display: none }
        #custom-rest-times { display: none }
        table td,
        table td * { vertical-align: top; }
        textarea { white-space: pre; word-wrap: normal; overflow: scroll; }
        ul.timeline { width: 400px; font-size: x-small; list-style-position: inside; padding: 0; vertical-align: middle; font-weight: bold; }
        ul.timeline li {}        
        li.accStarts,
        li.accEnds { color: #59b354; }
        li.stStarts,
        li.stEnds { color: #1b5fcc; }
        li.arr { color: red; }
        li.dep { color: white; }
        li.at { color: yellow; }
        .cont-time {
            z-index: 999;
            float: left;
            height: 21px;
            padding: 7px 10px 1px 5px;
            font-family: Arial, Helvetica, sans-serif;
            font-weight: bold;
            font-size: 10px;
            display: none;
        }
        .menubkg { background-color: #f8f8f8; border-radius: 15px; color: black; }
        .menubkg select { font-size: 10px; vertical-align: middle; }
        .menubkg select option:checked { background-color: #999; }
        .tselect { background-image: url(/assets/examples/traffic_timebw30x34s.png); width: 30px; height: 34px; margin-top: 2px; display: block; z-index: 999; float: left; cursor: pointer; text-decoration: none; }
        .commentControl { color : #fff; }
        .commentControl svg { }
        .H_ui * { font-size: 14px; }
        .commentControl.H_overlay.H_right::after { border-color: transparent transparent transparent #fff; }
		.form-group    { margin-left: 2px; margin-right: 2px; margin-top: 2px; margin-bottom: 2px; }
		.form-control,
        .control-label { margin-left: 0px; margin-right: 0px; margin-top: 0px; margin-bottom: 0px; }
    </style>

    <div class="ctrl-panel">
        <span id="toggle-ctrl-panel" class="glyphicon glyphicon-menu-left"></span>
        <div class="form-horizontal">
        <label><input type="radio" id="simple-mode-radio" name="Simple-Mode" checked=true onclick="changeInputMode(false);"> Simple Mode</label>
        <label><input type="radio" id="expert-mode-radio" name="Expert-Mode" onclick="changeInputMode(true);"> Expert Mode</label>
        </div>
        <div class="form-horizontal" id="simple-mode-div">
            <div class="form-group">
                <label class="control-label col-sm-4" for="environment">Endpoint:</label>
                <div class="col-sm-8">
                    <input class="form-control col-sm-6" type="text" id="endpoint" size="33" value="https://fleet.api.here.com/2/calculateroute.json" placeholder="URL with http or https and host" list="environments" />
                </div>
            </div>
            <div class="form-group">
                <label class="control-label col-sm-4" for="addtlparams">Parameters:</label>
                <div class="col-sm-8">
                    <input class="form-control col-sm-6" type="text" id="addtlparams" size="33" value="" placeholder="&amp;paramkey=paramvalue" list="environments" />
                </div>
            </div>
            <div class="form-group">
                <label class="control-label col-sm-4" for="exampleSelector">Predefined examples:</label>
                <div class="col-sm-8">
                    <select id="exampleSelector" class="form-control" onchange="exampleSelect(0)"></select>
                </div>
            </div>
            <div class="form-group">
                <label class="col-sm-4" for="exampleSelector">Waypoints:<input class="btn btn-default btn-sm" type="button" id="start" value="Redraw" onclick="parseWaypointsFromText('destinations')"></label>
                <div class="col-sm-8">
                    <textarea id="destinations" class="form-control" rows="8" placeholder="&waypoint1=50.00000,8.00000;optional;taketo:3;value:20

Click into the map to add waypoints"></textarea>
                </div>
            </div>

            <div class="form-group">
                <label class="control-label col-sm-4" for="vehicleType">Vehicle:</label>
                <div class="col-sm-8">
                    <select id="vehicleType" class="form-control">
						<option value="car"                    >car       			  </option>
						<option value="truck" selected = "true">truck     			  </option>
						<option value="emergency"              >emergency 			  </option>
                        <option value="pedestrian"             >pedestrian			  </option>
                        <option value="delivery"               >delivery			  </option>
						<option value="pedestrian,emergency"   >pedestrian / emergency</option>
						<option value="bus"					   >bus					  </option>
					</select>
                </div>
            </div>
            <div class="form-group">
                <div class="col-sm-4">
                    <label for="alternatives" class="control-label">Alternatives</label>
                </div>
                <div class="col-sm-8">
                    <input id="alternatives" class="form-control" type="text" size="8" value="0" pattern="[0-9]*\.?[0-9]*">
                </div>
            </div>
            <div class="form-group">
                <div class="col-sm-4">
                    <label for="drivercost" class="control-label">Driver Cost</label>
                </div>
                <div class="col-sm-8">
                    <input id="drivercost" class="form-control" type="text" size="8" value="" pattern="[0-9]*\.?[0-9]*">
                </div>
            </div>
            <div class="form-group">
                <div class="col-sm-4">
                    <label for="vehiclecost" class="control-label">Vehicle Cost</label>
                </div>
                <div class="col-sm-8">
                    <input id="vehiclecost" class="form-control" type="text" size="8" value="0" pattern="[0-9]*\.?[0-9]*">
                </div>
            </div>
            <div class="form-group">
                <div class="col-sm-4">
                    <label for="height" class="control-label">Height [m]</label>
                </div>
                <div class="col-sm-8">
                    <input id="height" class="form-control" type="text" size="8" value="3.80" pattern="[0-9]*\.?[0-9]*">
                </div>
            </div>
            <div class="form-group">
                <div class="col-sm-4">
                    <label for="width" class="control-label">Width [m]</label>
                </div>
                <div class="col-sm-8">
                    <input id="width" class="form-control" type="text" size="8" value="2.30" pattern="[0-9]*\.?[0-9]*">
                </div>
            </div>
            <div class="form-group">
                <div class="col-sm-4">
                    <label for="length" class="control-label">Length [m]</label>
                </div>
                <div class="col-sm-8">
                    <input id="length" class="form-control" type="text" size="8" value="8.35" pattern="[0-9]*\.?[0-9]*">
                </div>
            </div>
            <div class="form-group">
                <div class="col-sm-4">
                    <label for="limitedWeight" class="control-label">Limited Weight [t]</label>
                </div>
                <div class="col-sm-8">
                    <input id="limitedWeight" class="form-control" type="text" size="8" value="18" pattern="[0-9]*\.?[0-9]*">
                </div>
            </div>
            <div class="form-group">
                <div class="col-sm-4">
                    <label for="weightPerAxle" class="control-label">Weight Per Axle [t]</label>
                </div>
                <div class="col-sm-8">
                    <input id="weightPerAxle" class="form-control" type="text" size="8" value="10" pattern="[0-9]*\.?[0-9]*">
                </div>
            </div>
            <div class="form-group">
                <div class="col-sm-4">
                    <label for="hasTrailer" class="control-label">Trailer</label>
                </div>
                <div class="col-sm-8">
                    <input type="checkbox" id="hasTrailer">
                </div>
            </div>

           <div class="form-group">
                <div class="checkbox col-sm-3"> <label><input type="checkbox" id="explosive">explosive</label>                </div>
                <div class="checkbox col-sm-3"> <label><input type="checkbox" id="gas">gas</label>                            </div>
                <div class="checkbox col-sm-3"> <label><input type="checkbox" id="flammable">flammable</label>                </div>
                <div class="checkbox col-sm-3"> <label><input type="checkbox" id="combustible">combustible</label>            </div>
                <div class="checkbox col-sm-3"> <label><input type="checkbox" id="organic">organic</label>                    </div>
                <div class="checkbox col-sm-3"> <label><input type="checkbox" id="poison">poison</label>                      </div>
                <div class="checkbox col-sm-3"> <label><input type="checkbox" id="radioActive">radioactive</label>            </div>
                <div class="checkbox col-sm-3"> <label><input type="checkbox" id="corrosive">corrosive</label>                </div>
                <div class="checkbox col-sm-3"> <label><input type="checkbox" id="poisonousInhalation">poisonous Inh.</label> </div>
                <div class="checkbox col-sm-3"> <label><input type="checkbox" id="harmfulToWater">water harm.</label>         </div>
                <div class="checkbox col-sm-3"> <label><input type="checkbox" id="other">other</label>                        </div>
            </div>

             <div class="form-group">
                <div class="col-sm-4">
                    <label for="traffic" class="control-label">Traffic-aware routing:</label>
                </div>
                <div class="col-sm-8">
                    <select id="traffic" class="form-control">
					<option value="enabled">enabled</option>
					<option value="disabled" selected="true">disabled</option>
				</select>
                </div>
            </div>
            <div class="form-group">
                <div class="col-sm-4">
                    <label for="motorway" class="control-label">Avoid Motorway:</label>
                </div>
                <div class="col-sm-8">
                    <select id="motorway" class="form-control">
                    <option value="1" selected="true">None</option>
					<option value="0">Default</option>
                    <option value="-1">Avoid</option>
                    <option value="-2">Soft Exclude</option>
                    <option value="-3">Strict Exclude</option>
				</select>
                </div>
            </div>
            <div class="form-group">
                <div class="col-sm-4">
                    <label for="toll" class="control-label">Avoid Toll Roads:</label>
                </div>
                <div class="col-sm-8">
                    <select id="toll" class="form-control">
					<option value="1" selected="true">None</option>
                    <option value="0">Default</option>
                    <option value="-1">Avoid</option>
                    <option value="-2">Soft Exclude</option>
                    <option value="-3">Strict Exclude</option>
				</select>
                </div>
            </div>
            <div class="form-group">
                <div class="col-sm-4">
                    <label for="boatFerry" class="control-label">Avoid Boat Ferrys:</label>
                </div>
                <div class="col-sm-8">
                    <select id="boatFerry" class="form-control">
                    <option value="1" selected="true">None</option>
					<option value="0">Default</option>
                    <option value="-1">Avoid</option>
                    <option value="-2">Soft Exclude</option>
                    <option value="-3">Strict Exclude</option>
				</select>
                </div>
            </div>
            <div class="form-group">
                <div class="col-sm-4">
                    <label for="railFerry" class="control-label">Avoid Rail Ferrys:</label>
                </div>
                <div class="col-sm-8">
                    <select id="railFerry" class="form-control">
					<option value="1" selected="true">None</option>
					<option value="0">Default</option>
                    <option value="-1">Avoid</option>
                    <option value="-2">Soft Exclude</option>
                    <option value="-3">Strict Exclude</option>
				</select>
                </div>
            </div>		
            <div class="form-group">
                <div class="col-sm-4">
                    <label for="traffic" class="control-label">Departure / Arrival</label>
                </div>
                <div class="col-sm-8">
                    <div class="form-inline">
                        <input class="form-control col-sm-6" id="departure" type="text" placeholder="YYYY-MM-DD'T'HH:MM:SS" size="16" pattern="^(19|20)\d\d[-](0[1-9]|1[012])[-](0[1-9]|[12][0-9]|3[01])T([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$" title="TYYY-MM-DD'T'HH:mm:ss">
                        <input class="form-control col-sm-6" id="arrival"   type="text" placeholder="YYYY-MM-DD'T'HH:MM:SS" size="16" pattern="^(19|20)\d\d[-](0[1-9]|1[012])[-](0[1-9]|[12][0-9]|3[01])T([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$" title="TYYY-MM-DD'T'HH:mm:ss">
                    </div>
                </div>
            </div>
            
        </div>
        <div class="form-horizontal" id="expert-mode-div" style="display: none;">
            <textarea id="completeUrl" class="form-control" rows="8" placeholder="Paste complete calculate route URL here" onChange="parseWaypointsFromText('completeUrl');" onkeyup="if (event.keyCode == 13) {calculateRoute();} else {parseWaypointsFromText('completeUrl');}"></textarea>
        </div>
        <div class="form-group">
            <input class="btn btn-default btn-sm" type="button" id="start" value="Calculate" onclick="calculateRoute()"> Show
            <input type="checkbox" id="showManeuvers" value="on"> Maneuvers
			<input type="checkbox" id="truckrestr" value="on" checked="checked" onchange="truckSelect();"> Truck restrictions
			<input type="checkbox" id="linkTime" value="on" onchange="timeAlongRouteSelect();"> Time along route
        </div>

        <hr class="separator">
        <div class="form-group">
            <div id="feedbackTxt"></div>
        </div>

    </div>


    <div id="spinner"></div>
    <div id="pageblock"></div>
    <div id="mapContainer"></div>
    <div class="ctrl-time">
        <div class="cont-time menubkg">
            <label for="dOfWeek">Day of week: </label>
            <select class="nvt_select" id="dOfWeek" name="">
			<option value="0">Sunday</option>
			<option value="1">Monday</option>
			<option value="2">Tuesday</option>
			<option value="3">Wednesday</option>
			<option value="4">Thursday</option>
			<option value="5">Friday</option>
			<option value="6">Saturday</option>
		</select>
            <span>&nbsp;&nbsp;</span>
            <label for="hour">Time: </label>
            <select class="nvt_select" id="hour" name="">
			<option value="0">0</option>
			<option value="1">1</option>
			<option value="2">2</option>
			<option value="3">3</option>
			<option value="4">4</option>
			<option value="5">5</option>
			<option value="6">6</option>
			<option value="7">7</option>
			<option value="8">8</option>
			<option value="9">9</option>
			<option value="10">10</option>
			<option value="11">11</option>
			<option value="12">12</option>
			<option value="13">13</option>
			<option value="14">14</option>
			<option value="15">15</option>
			<option value="16">16</option>
			<option value="17">17</option>
			<option value="18">18</option>
			<option value="19">19</option>
			<option value="20">20</option>
			<option value="21">21</option>
			<option value="22">22</option>
			<option value="23">23</option>
		</select>
            <span>:</span>
            <select class="nvt_select" id="minutes" name="">
			<option value="00">00</option>
			<option value="10">10</option>
			<option value="20">20</option>
			<option value="30">30</option>
			<option value="40">40</option>
			<option value="50">50</option>
		</select>
        </div>
        <a class="button trafficTimeBtn tselect"></a>
    </div>
    <script type="text/javascript">
        /**
         * @author Rohit Misra
         * (C) HERE 2017
         */
		/*
		author domschuette
		(C) HERE 2019
		*/		 

        /**  Set authentication app_id and app_code
         *  WARNING: this is a demo-only key
         *  please register on http://developer.here.com/
         *  and obtain your own API key
         */

        $(document).ready(function() {});
        var feedbackTxt = document.getElementById("feedbackTxt");
        var padZerosNumbers = function(num, size) {
            var negative = (num < 0);
            if (negative) {
                num = Math.abs(num);
                size--;
            }
            var s = num + "";
            while (s.length < size) s = "0" + s;
            return negative ? "-" + s : s;
        };
        var CATEGORY_WAITING_FOR_OPENING_AT_WAY_POINT = 16;
        var now = moment();
        var secure = secure = (location.protocol === 'https:') ? true : false;
        var noneExampleTxt = getUrlParameter('destinations');
        var custom_app_id = getUrlParameter('app_id');
        var custom_app_code = getUrlParameter('app_code');
        var host = getUrlParameter('host');      
        var destinationsTextArea = document.getElementById('destinations');
        setDepartureNow();

        if (custom_app_id !== null && custom_app_code !== null) {
            app_id = custom_app_id;
            app_code = custom_app_code;
            document.getElementById("endpointDetails").style.display = "table-row";
        }

        // check if the site was loaded via secure connection
        var baseUrl = (secure ? "https:" : "http:") + "//" + host + "/2/findsequence.json?";
        var hidpi = ('devicePixelRatio' in window && devicePixelRatio > 1);
        function RouteSample(label, content, params, type) {
            this.label = label;
            this.content = content;
            this.params = params;
			this.type = type;
            this.getLabel = function() {
                return label;
            };
            this.getContent = function() {
                return content;
            };
            this.getParams = function(){
                return this.params===undefined ? "" : this.params;
            };
            this.hasParams = function(){
                return this.params!==undefined && this.params!==null && this.params!=="";
            };
			this.hasType = function(){
				return this.type!==undefined && this.type!==null && this.type!=="";
			};
			this.getType = function(){
				return this.type===undefined ? "" : this.type;
			}
        }

        var mapContainer = document.getElementById('mapContainer');

        var platform = new H.service.Platform({ apikey: api_key, useHTTPS: secure }),
            defaultLayers = platform.createDefaultLayers(),
            router = platform.getRoutingService(),
            labels = new H.map.Group(),
            groups = [],
            activeGroup = null,
            activeConnections = null,
            activeLabels = null,
            basemaptileService = platform.getMapTileService({ 'type': 'base' });
        
        map = new H.Map(mapContainer,  defaultLayers.vector.normal.map, { center: center, zoom: zoom, pixelRatio: window.devicePixelRatio || 1 });
        map.getViewPort().setPadding(0, 0, 0, $('.ctrl-panel').width()); // do not draw under control panel
        map.getViewPort().setPadding(0, 0, 0, $('.ctrl-panel').width()); // set padding for control panel
        map.addObject(labels);                                           // add labels (waypoint markers) to map
        new H.mapevents.Behavior(new H.mapevents.MapEvents(map)); // add behavior control, e.g. for mouse
        var expertModeEnabled = false;
		map.addEventListener('tap', function(evt) {
           if (typeof evt.target.$linkId === 'undefined') { // if user hasn't clicked onto a route link
                if(!expertModeEnabled) {
                    var traceTextArea = destinationsTextArea;
                    var coords = map.screenToGeo(evt.currentPointer.viewportX, evt.currentPointer.viewportY);
                    var numLines = (traceTextArea.value == "") ? 0 : traceTextArea.value.split(/\r*\n/).length;
                    waypointsArr.push(new Waypoints(waypointsArr.length, coords.lat, coords.lng));
                    createMarkersForWaypoints();
                    refreshWaypointText();
                }
            }
        }, false);
		
        // enable UI components and remove the unnecessary
        var ui = H.ui.UI.createDefault(map, defaultLayers);

        var groupClickedWaypoints = new H.map.Group();
        groupClickedWaypoints.setZIndex(1); 
        map.addObject(groupClickedWaypoints);
        window.addEventListener('resize', function() {
            map.getViewPort().resize();
        });

        var routeLinkHashMap = new Object(); // key = linkID, value = link object
        var legLinkHashMap = new Object();
        var group = new H.map.Group();
        map.addObject(group);
        var warningsGroup = new H.map.Group();
        map.addObject(warningsGroup);
        var elapsedTimeGroup = new H.map.Group();
        var routeStroke = 8;
        var routeColor = ["rgba(18, 65, 145, 0.8)", "rgba(0, 145, 255, 0.7)", "rgba(127, 201, 255, 0.6)"];
        var server_rr = 0; // for truck overlay tile load URLs
        var waypointsArr = [];
        var spaceGroup = new H.map.Group();
        spaceGroup.setZIndex(4);
        map.addObject(spaceGroup);
        var spaceGroupB = new H.map.Group();
        spaceGroupB.setZIndex(5);
        map.addObject(spaceGroupB);
		
		var createCanvasCircle = function(fillStyle, strokeStyle, lineWidth, radius)
		{
			var canvas = document.createElement('canvas'),
				context = canvas.getContext('2d');
				canvas.width = canvas.height = 6,
				centerX = canvas.width / 2,
				centerY = canvas.height / 2,
				radius = radius;

			context.beginPath();
			context.arc(centerX, centerY, radius, 0, 2 * Math.PI, false);
			context.fillStyle = fillStyle;
			context.fill();
			context.lineWidth = lineWidth;
			context.strokeStyle = strokeStyle;
			context.stroke();
			return canvas;
		}
		
		var circle = new H.map.Icon(createCanvasCircle('grey', 'grey', 1, 2));
        var circleB = new H.map.Icon(createCanvasCircle('orange', 'orange', 1, 1));

        //removed the below example because it works together with an overlays and this overlays must be created from another demo so does not make mush sense. Add it if required again   
        //"swissRoute": new RouteSample("Road Blocked due to snow", "&waypoint0=46.997337,7.720789\n&waypoint1=46.996716,7.728708\n&waypoint2=46.994469,7.729678")

        var samplesObj = {
            "blank": new RouteSample("Please select an example", ""),
            "mainBrueke": new RouteSample("Main river bridge route", "&waypoint0=50.11089,8.68809\n&waypoint1=50.10703,8.68222"),
            "fraRoute": new RouteSample("Simple Route - Points in Frankfurt", "&waypoint0=50.115620,8.631210\n&waypoint1=50.122540,8.631070\n&waypoint2=50.128920,8.629830\n&waypoint3=50.132540,8.649280"),
            "fraOneWay": new RouteSample("Frankfurt one way example", "&waypoint0=50.131764,8.616784\n&waypoint1=50.131143,8.618211"),
            "fraNoTruck": new RouteSample("Restricted way for Truck", "&waypoint0=50.106860,8.629233\n&waypoint1=50.105718,8.633553"),
            "DK_SWE_Motorway": new RouteSample("Avoid motorways through Denmark-Sweden route", "&waypoint0=55.515896,9.458414\n&waypoint1=55.454537,9.891686\n&waypoint2=55.381344,11.337998\n&waypoint3=55.568923,12.858715\n&waypoint4=55.590871,13.107827"),
            "English_channel_ferry": new RouteSample("Avoid ferries over the English channel", "&waypoint0=50.911237,1.928579\n&waypoint1=51.149763,1.321334"),
            "Boston_Canaan": new RouteSample("Avoid Tolls in US", "&waypoint0=42.35866,-71.05675\n&waypoint1=42.41218,-73.44781"),
            "fraStopOver": new RouteSample("StopOver at a way point in Frankfurt", "&waypoint0=50.12188,8.64859\n&waypoint1=stopOver,300!50.121499, 8.650912\n&waypoint2=50.12003,8.65228"),
            "fraDarmstadtDriverRestTime": new RouteSample("Driver Rest Time - Frankfurt to Darmstadt", "&waypoint0=50.11208,8.68342\n&waypoint1=49.87264,8.65014"),
            "fraTruckShouldWaitOnSunday": new RouteSample("Truck Not Allowed on Sunday in Frankfurt", "&waypoint0=50.08211,8.64391\n&waypoint1=50.14156,8.66751"),
            "fraOpeningTime": new RouteSample("Opening Time at a way point in Frankfurt", "&waypoint0=50.18025,8.61968\n&waypoint1=50.18197,8.62564;opening:200\n&waypoint2=50.18076,8.6266"),
            "capacityDemo1": new RouteSample("Route with no capacity", "&waypoint0=50.13552,8.52318\n&waypoint1=50.087929,8.449031;optional;taketo:2;value:5\n&waypoint2=50.088592,8.451459;optional\n&waypoint3=50.22151,8.58675", "&driver_cost=11&currency=EUR"),
            "capacityDemo2": new RouteSample("Route with feasible capacity", "&waypoint0=50.13552,8.52318\n&waypoint1=50.087929,8.449031;optional;taketo:2;value:5;load:1,4,5\n&waypoint2=50.088592,8.451459;optional\n&waypoint3=50.22151,8.58675", "&driver_cost=11&currency=EUR&capacity=1,5,7"),
            "capacityDemo3": new RouteSample("Route with infeasible capacity", "&waypoint0=50.13552,8.52318\n&waypoint1=50.087929,8.449031;load:1,6,5;optional;taketo:2;value:5\n&waypoint2=50.088592,8.451459;optional\n&waypoint3=50.22151,8.58675", "&driver_cost=11&currency=EUR&capacity=1,5,7"),
            "alternativesDemo": new RouteSample("Frankfurt to Hohenstadt via Stuttgart", "&waypoint0=50.112698,8.675777\n&waypoint1=48.544180,9.662530", ""),
            "relaxVehTypRestrToTurnIntoZeilFrankfurtNotWorking": new RouteSample("Destination in a Pedestrian Zone - Truck Not Allowed", "&waypoint0=50.114089,8.628484\n&waypoint1=50.114467,8.679136\n&waypoint2=50.114210,8.681649", ""),
            "relaxVehTypRestrToTurnIntoZeilFrankfurtWorking": new RouteSample("Destination in a Pedestrian Zone - Truck Allowed", "&waypoint0=50.114089,8.628484\n&waypoint1=50.114467,8.679136\n&waypoint2=50.114210,8.681649", ""),
            "headingAndWSEParams": new RouteSample("Heading, Transit Radius Params", "&waypoint0=50.135372,8.625288;;Label1;180\n&waypoint1=50.115517,8.609948;10;Label1;100;optional;taketo:2;value:40\n&waypoint2=50.121864,8.629207;optional\n&waypoint3=50.121864,8.629207"),
            "excludecountries": new RouteSample("Avoid Countries", "&waypoint0=52.320738,4.915213\n&waypoint1=52.223914,20.985335"),
			"environmentalZones": new RouteSample("Environmental Zones", "&waypoint0=50.053790,8.517742\n&waypoint1=50.111940,8.654793"),
			"emergencyExample": new RouteSample("Emergency Example", "&waypoint0=50.079342,8.219209\n&waypoint1=50.081036,8.238553", "&oneway=penalty:0.5", "emergency"),
            "wasteCollection": new RouteSample("Waste collection route", "&waypoint0=50.13363,8.51574\n&waypoint1=50.11973,8.5438;sort\n&waypoint2=50.12075,8.52314;sort\n&waypoint3=50.11782,8.5289;sort\n&waypoint4=50.12026,8.52344;sort\n&waypoint5=50.12387,8.52013;sort\n&waypoint6=50.12911,8.52956;sort\n&waypoint7=50.12843,8.53323;sort\n&waypoint8=50.1273,8.53497;sort\n&waypoint9=50.12699,8.53582;sort\n&waypoint10=50.12686,8.5369;sort\n&waypoint11=50.1271,8.53777;sort\n&waypoint12=50.13058,8.53329;sort\n&waypoint13=50.12681,8.522;sort\n&waypoint14=50.12774,8.52365;sort\n&waypoint15=50.12839,8.52479;sort\n&waypoint16=50.12909,8.5261;sort\n&waypoint17=50.12985,8.52747;sort\n&waypoint18=50.12767,8.5264;sort\n&waypoint19=50.1283,8.53108;sort\n&waypoint20=50.12972,8.53018;sort\n&waypoint21=50.12756,8.52254;sort\n&waypoint22=50.12824,8.52269;sort\n&waypoint23=50.12769,8.52086;sort\n&waypoint24=50.12799,8.52191;sort\n&waypoint25=50.12857,8.52123;sort\n&waypoint26=50.12954,8.52155;sort\n&waypoint27=50.12934,8.52028;sort\n&waypoint28=50.12934,8.51893;sort\n&waypoint29=50.13009,8.52086;sort\n&waypoint30=50.12991,8.51951;sort\n&waypoint31=50.1296,8.51829;sort\n&waypoint32=50.13024,8.51908;sort\n&waypoint33=50.12989,8.51837;sort\n&waypoint34=50.12996,8.51744;sort\n&waypoint35=50.13044,8.51783;sort\n&waypoint36=50.13044,8.51681;sort\n&waypoint37=50.1308,8.51853;sort\n&waypoint38=50.13133,8.51789;sort\n&waypoint39=50.13108,8.51675;sort\n&waypoint40=50.13205,8.5171;sort\n&waypoint41=50.13254,8.51612;sort\n&waypoint42=50.13275,8.51543;sort\n&waypoint43=50.13197,8.515;sort\n&waypoint44=50.13143,8.51371;sort\n&waypoint45=50.13053,8.51055;sort\n&waypoint46=50.12801,8.50433;sort\n&waypoint47=50.12853,8.52385;sort\n&waypoint48=50.12957,8.52232;sort\n&waypoint49=50.12935,8.52387;sort\n&waypoint50=50.1301,8.52337;sort\n&waypoint51=50.12988,8.52475;sort\n&waypoint52=50.13032,8.52458;sort\n&waypoint53=50.13017,8.52533;sort\n&waypoint54=50.12991,8.52627;sort\n&waypoint55=50.13083,8.52627;sort\n&waypoint56=50.13054,8.52528;sort\n&waypoint57=50.13124,8.52595;sort\n&waypoint58=50.1313,8.52554;sort\n&waypoint59=50.13061,8.52387;sort\n&waypoint60=50.13104,8.52468;sort\n&waypoint61=50.13048,8.52322;sort\n&waypoint62=50.13131,8.52491;sort\n&waypoint63=50.1318,8.52469;sort\n&waypoint64=50.13192,8.52392;sort\n&waypoint65=50.13153,8.52413;sort\n&waypoint66=50.13101,8.52407;sort\n&waypoint67=50.13086,8.52277;sort\n&waypoint68=50.13122,8.52331;sort\n&waypoint69=50.13173,8.52309;sort\n&waypoint70=50.13185,8.52347;sort\n&waypoint71=50.13153,8.52268;sort\n&waypoint72=50.13131,8.52261;sort\n&waypoint73=50.13111,8.52235;sort\n&waypoint74=50.13109,8.52183;sort\n&waypoint75=50.13123,8.5214;sort\n&waypoint76=50.13118,8.52126;sort\n&waypoint77=50.13066,8.52201;sort\n&waypoint78=50.13141,8.52215;sort\n&waypoint79=50.13185,8.52262;sort\n&waypoint80=50.13228,8.52305;sort\n&waypoint81=50.13212,8.52152;sort\n&waypoint82=50.1324,8.52241;sort\n&waypoint83=50.13279,8.52259;sort\n&waypoint84=50.13267,8.52197;sort\n&waypoint85=50.13311,8.52181;sort\n&waypoint86=50.13283,8.52107;sort\n&waypoint87=50.13314,8.52006;sort\n&waypoint88=50.13252,8.52046;sort\n&waypoint89=50.1323,8.52015;sort\n&waypoint90=50.13193,8.52007;sort\n&waypoint91=50.132,8.5202;sort\n&waypoint92=50.13267,8.51916;sort\n&waypoint93=50.13353,8.52105;sort\n&waypoint94=50.13402,8.52052;sort\n&waypoint95=50.13311,8.51954;sort\n&waypoint96=50.13339,8.51875;sort\n&waypoint97=50.13428,8.51995;sort\n&waypoint98=50.13283,8.51671;sort\n&waypoint99=50.13313,8.5177;sort\n&waypoint100=50.13362,8.51863;sort\n" 
            + "&waypoint101=50.13423,8.51941;sort\n&waypoint102=50.13384,8.51698;sort\n&waypoint103=50.13466,8.51627;sort\n&waypoint104=50.13546,8.5172;sort\n&waypoint105=50.1348,8.51877;sort\n&waypoint106=50.13485,8.51768;sort\n&waypoint107=50.13493,8.51685;sort\n&waypoint108=50.13466,8.51683;sort\n&waypoint109=50.1345,8.51721;sort\n&waypoint110=50.13455,8.51779;sort\n&waypoint111=50.13417,8.51773;sort\n&waypoint112=50.13402,8.51814;sort\n&waypoint113=50.13412,8.51867;sort\n&waypoint114=50.13073,8.52828;sort\n&waypoint115=50.13092,8.52746;sort\n&waypoint116=50.13125,8.52789;sort\n&waypoint117=50.13076,8.52862;sort\n&waypoint118=50.13506,8.51924;sort\n&waypoint119=50.13567,8.5183;sort\n&waypoint120=50.13594,8.51742;sort\n&waypoint121=50.13609,8.51695;sort\n&waypoint122=50.13682,8.51622;sort\n&waypoint123=50.13718,8.51665;sort\n&waypoint124=50.136,8.51806;sort\n&waypoint125=50.13558,8.51951;sort\n&waypoint126=50.13493,8.52033;sort\n&waypoint127=50.13544,8.5208;sort\n&waypoint128=50.1362,8.51958;sort\n&waypoint129=50.13719,8.51853;sort\n&waypoint130=50.13713,8.51917;sort\n&waypoint131=50.13706,8.52012;sort\n&waypoint132=50.13615,8.52149;sort\n&waypoint133=50.13422,8.5234;sort\n&waypoint134=50.13439,8.52451;sort\n&waypoint135=50.13331,8.52583;sort\n&waypoint136=50.13768,8.51885;sort\n&waypoint137=50.13814,8.51815;sort\n&waypoint138=50.138,8.51873;sort\n&waypoint139=50.13763,8.51982;sort\n&waypoint140=50.13689,8.52109;sort\n&waypoint141=50.13648,8.52186;sort\n&waypoint142=50.13555,8.52322;sort\n&waypoint143=50.13468,8.52442;sort\n&waypoint144=50.13426,8.52547;sort\n&waypoint145=50.13404,8.5266;sort\n&waypoint146=50.13377,8.5259;sort\n&waypoint147=50.13333,8.52624;sort\n&waypoint148=50.13338,8.52719;sort\n&waypoint149=50.13362,8.52781;sort\n&waypoint150=50.13338,8.52818;sort\n&waypoint151=50.13306,8.52812;sort\n&waypoint152=50.13215,8.52861;sort\n&waypoint153=50.1311,8.52906;sort\n&waypoint154=50.13042,8.52849;sort\n&waypoint155=50.13013,8.5324;sort\n&waypoint156=50.13056,8.53245;sort\n&waypoint157=50.12992,8.53507;sort\n&waypoint158=50.13113,8.53049;sort\n&waypoint159=50.13138,8.5311;sort\n&waypoint160=50.13085,8.5314;sort\n&waypoint161=50.13104,8.53164;sort\n&waypoint162=50.13201,8.53262;sort\n&waypoint163=50.13159,8.52957;sort\n&waypoint164=50.13156,8.5302;sort\n&waypoint165=50.1318,8.53098;sort\n&waypoint166=50.13028,8.53966;sort\n&waypoint167=50.13219,8.53538;sort\n&waypoint168=50.13113,8.53644;sort\n&waypoint169=50.13107,8.53667;sort\n&waypoint170=50.13327,8.52863;sort\n&waypoint171=50.13338,8.52918;sort\n&waypoint172=50.13385,8.52958;sort\n&waypoint173=50.13346,8.53034;sort\n&waypoint174=50.13242,8.53127;sort\n&waypoint175=50.13285,8.53174;sort\n&waypoint176=50.13315,8.53128;sort\n&waypoint177=50.13406,8.5312;sort\n&waypoint178=50.13316,8.53531;sort\n&waypoint179=50.13352,8.53722;sort\n&waypoint180=50.13499,8.53651;sort\n&waypoint181=50.13398,8.53886;sort\n&waypoint182=50.13432,8.54011;sort\n&waypoint183=50.13321,8.54241;sort\n&waypoint184=50.13243,8.54115;sort\n&waypoint185=50.13516,8.5301;sort\n&waypoint186=50.13479,8.53066;sort\n&waypoint187=50.13441,8.5313;sort\n&waypoint188=50.13474,8.53237;sort\n&waypoint189=50.13408,8.53194;sort\n&waypoint190=50.13349,8.53298;sort\n&waypoint191=50.13303,8.53379;sort\n&waypoint192=50.13538,8.53116;sort\n&waypoint193=50.13503,8.53159;sort\n&waypoint194=50.13433,8.53316;sort\n&waypoint195=50.13357,8.53435;sort\n&waypoint196=50.1362,8.53102;sort\n&waypoint197=50.13591,8.53176;sort\n&waypoint198=50.13572,8.5321;sort\n&waypoint199=50.13554,8.53244;sort\n" 
            + "&waypoint200=50.13538,8.5327;sort\n&waypoint201=50.13593,8.53292;sort\n&waypoint202=50.13561,8.53336;sort\n&waypoint203=50.13519,8.53307;sort\n&waypoint204=50.13579,8.53527;sort\n&waypoint205=50.1349,8.53364;sort\n&waypoint206=50.1345,8.53439;sort\n&waypoint207=50.13506,8.53494;sort\n&waypoint208=50.13412,8.53508;sort\n&waypoint209=50.13369,8.53584;sort\n&waypoint210=50.13442,8.53494;sort\n&waypoint211=50.13463,8.53535;sort\n&waypoint212=50.13411,8.53585;sort\n&waypoint213=50.13439,8.53625;sort\n&waypoint214=50.13364,8.53647;sort\n&waypoint215=50.13386,8.53686;sort\n&waypoint216=50.13415,8.53711;sort\n&waypoint217=50.13343,8.53635;sort\n&waypoint218=50.13616,8.532;sort\n&waypoint219=50.13685,8.53157;sort\n&waypoint220=50.1364,8.53278;sort\n&waypoint221=50.13697,8.53251;sort\n&waypoint222=50.13651,8.53314;sort\n&waypoint223=50.13738,8.53242;sort\n&waypoint224=50.13686,8.53419;sort\n&waypoint225=50.13796,8.53306;sort\n&waypoint226=50.13441,8.52621;sort\n&waypoint227=50.13502,8.52649;sort\n&waypoint228=50.13494,8.52722;sort\n&waypoint229=50.1342,8.52739;sort\n&waypoint230=50.13488,8.52859;sort\n&waypoint231=50.13543,8.52772;sort\n&waypoint232=50.13589,8.52784;sort\n&waypoint233=50.13584,8.52703;sort\n&waypoint234=50.13553,8.52848;sort\n&waypoint235=50.13555,8.52946;sort\n&waypoint236=50.13602,8.52872;sort\n&waypoint237=50.13651,8.528;sort\n&waypoint238=50.13651,8.52902;sort\n&waypoint239=50.13655,8.53012;sort\n&waypoint240=50.13721,8.52914;sort\n&waypoint241=50.13822,8.53091;sort\n&waypoint242=50.13889,8.53187;sort\n&waypoint243=50.13911,8.53159;sort\n&waypoint244=50.13871,8.53107;sort\n&waypoint245=50.13897,8.52966;sort\n&waypoint246=50.13798,8.52958;sort\n&waypoint247=50.13815,8.52801;sort\n&waypoint248=50.1371,8.52825;sort\n&waypoint249=50.13644,8.52725;sort\n&waypoint250=50.13572,8.52613;sort\n&waypoint251=50.13525,8.5254;sort\n&waypoint252=50.13484,8.5249;sort\n&waypoint253=50.13503,8.52442;sort\n&waypoint254=50.13554,8.52549;sort\n&waypoint255=50.13621,8.52644;sort\n&waypoint256=50.136,8.52577;sort\n&waypoint257=50.13584,8.52506;sort\n&waypoint258=50.13645,8.52604;sort\n&waypoint259=50.13627,8.52541;sort\n&waypoint260=50.13627,8.52432;sort\n&waypoint261=50.13683,8.52548;sort\n&waypoint262=50.13699,8.52438;sort\n&waypoint263=50.13696,8.52326;sort\n&waypoint264=50.13745,8.52515;sort\n&waypoint265=50.13768,8.52356;sort\n&waypoint266=50.13842,8.52365;sort\n&waypoint267=50.13795,8.5249;sort\n&waypoint268=50.13827,8.52628;sort\n&waypoint269=50.13756,8.52608;sort\n&waypoint270=50.13756,8.52695;sort\n&waypoint271=50.13703,8.52721;sort\n&waypoint272=50.13687,8.52233;sort\n&waypoint273=50.13745,8.52244;sort\n&waypoint274=50.13801,8.52235;sort\n&waypoint275=50.13861,8.52287;sort\n&waypoint276=50.13789,8.52162;sort\n&waypoint277=50.1385,8.52207;sort\n&waypoint278=50.13838,8.52138;sort\n&waypoint279=50.13928,8.52055;sort\n&waypoint280=50.13796,8.52037;sort\n&waypoint281=50.13864,8.51886;sort\n&waypoint282=50.13944,8.52002;sort\n&waypoint283=50.13991,8.52023;sort\n&waypoint284=50.14042,8.5191;sort\n&waypoint285=50.13963,8.51954;sort\n&waypoint286=50.13831,8.51736;sort\n&waypoint287=50.13846,8.51694;sort\n&waypoint288=50.13859,8.51664;sort\n&waypoint289=50.13883,8.51718;sort\n&waypoint290=50.13927,8.5175;sort\n&waypoint291=50.13985,8.51791;sort\n&waypoint292=50.14049,8.51834;sort\n&waypoint293=50.14025,8.51797;sort\n&waypoint294=50.14004,8.51752;sort\n&waypoint295=50.14058,8.51789;sort\n&waypoint296=50.13864,8.51569;sort\n&waypoint297=50.13973,8.51693;sort\n&waypoint298=50.1415,8.51698;sort\n&waypoint299=50.13898,8.51432;sort\n" + 
            "&waypoint300=50.13941,8.51553;sort\n&waypoint301=50.14005,8.5147;sort\n&waypoint302=50.14016,8.51573;sort\n&waypoint303=50.14073,8.51435;sort\n&waypoint304=50.14078,8.51414;sort\n&waypoint305=50.13911,8.51364;sort\n&waypoint306=50.13929,8.51286;sort\n&waypoint307=50.13893,8.51346;sort\n&waypoint308=50.13921,8.51085;sort\n&waypoint309=50.1382,8.51335;sort\n&waypoint310=50.13767,8.51271;sort\n&waypoint311=50.1378,8.51177;sort\n&waypoint312=50.13765,8.51181;sort\n&waypoint313=50.13754,8.51401;sort\n&waypoint314=50.14262,8.5148;sort\n&waypoint315=50.14346,8.51314;sort\n&waypoint316=50.14383,8.51242;sort\n&waypoint317=50.14496,8.51047;sort\n&waypoint318=50.13929,8.51067;sort\n&waypoint319=50.13988,8.51238;sort\n&waypoint320=50.14029,8.51269;sort\n&waypoint321=50.14065,8.51283;sort\n&waypoint322=50.14108,8.51328;sort\n&waypoint323=50.11931,8.52514;sort\n&waypoint324=50.13422,8.52076;sort\n&waypoint325=50.13391,8.52861;sort\n&waypoint326=50.13493,8.52956;sort\n&waypoint327=50.13583,8.53025;sort\n&waypoint328=50.13699,8.531;sort\n&waypoint329=50.13779,8.53147;sort\n&waypoint330=50.13849,8.53192;sort\n&waypoint331=50.13363,8.51574", "&ignoreWaypointVehicleRestriction=500&traverseGate=true&avoidTurns=uTurnAtWaypoint", "delivery"),
			"busExample": new RouteSample("Bus Example", "&waypoint0=50.080358,8.246076\n&waypoint1=50.080186,8.236179", "", "bus")
		};


        var Simulation = function(routeSamplesArr, label, commentArr){
            //this.id = id;
            this.routeSamplesArr = routeSamplesArr;
            this.commentArr = commentArr;

            if(label === undefined || label === null || label === ''){
                this.label = routeSamplesArr[0].getLabel();
            }else{
                this.label = label;
            }

            this.getLabel = function(){
                return this.label;
            };

            this.getRoutes = function(){
                return this.routeSamplesArr;
            };

            this.getComments = function(idx){
                if(idx!==undefined && idx!=null && idx>=0 && commentArr && commentArr.length > 0){
                    return commentArr[idx];
                }
            }

        };

        var simulationsObj = {
            'blank': new Simulation([samplesObj['blank']]),
            'mainBrueke': new Simulation([samplesObj['mainBrueke']]),
            'fraRoute': new Simulation([samplesObj['fraRoute']]),
            'fraOneWay': new Simulation([samplesObj['fraOneWay']]),
            //'swissRoute': new Simulation([samplesObj['swissRoute']]), //removed this example from the demo because it needs an overlay and this overlay must be created in another demo - does not make much sense
            'fraNoTruck': new Simulation([samplesObj['fraNoTruck']]),
            'DK_SWE_Motorway': new Simulation([samplesObj['DK_SWE_Motorway']]),
            'English_channel_ferry': new Simulation([samplesObj['English_channel_ferry']]),
            'Boston_Canaan': new Simulation([samplesObj['Boston_Canaan']]),
            'fraStopOver': new Simulation([samplesObj['fraStopOver']]),
            'fraDarmstadtDriverRestTime': new Simulation([samplesObj['fraDarmstadtDriverRestTime']]),
            'fraTruckShouldWaitOnSunday': new Simulation([samplesObj['fraTruckShouldWaitOnSunday']]),
            'fraOpeningTime': new Simulation([samplesObj['fraOpeningTime']]),
            'capacityDemo': new Simulation([samplesObj['capacityDemo1'], samplesObj['capacityDemo2'], samplesObj['capacityDemo3']], "Capacity Examples", ["Route with no capacity works as expected", 
                                                                                                                                                          "A load satisfies the capacity, so it is picked up", 
                                                                                                                                                          "A load exceeds the capacity, so it is rejected, hence a waypoint is skipped."]),
            'alternativesDemo': new Simulation([samplesObj['alternativesDemo']]),
            'relaxVehTypRestrToTurnIntoZeilFrankfurtNotWorking': new Simulation([samplesObj['relaxVehTypRestrToTurnIntoZeilFrankfurtNotWorking']]),
            'relaxVehTypRestrToTurnIntoZeilFrankfurtWorking': new Simulation([samplesObj['relaxVehTypRestrToTurnIntoZeilFrankfurtWorking']]),
            'headingAndWSEParams': new Simulation([samplesObj['headingAndWSEParams']]),
            'excludeCountries': new Simulation([samplesObj['excludecountries']]),
			'environmentalZones': new Simulation([samplesObj['environmentalZones']]),
			'emergencyExample': new Simulation([samplesObj['emergencyExample']]),
            'wasteCollection': new Simulation([samplesObj['wasteCollection']]),
			'busExample': new Simulation([samplesObj['busExample']])
        };

        /**
        *   Load samples and populate them in the drop down
        */
        var loadSamples = function() {
            for (var simulation in simulationsObj) {
                var opt = document.createElement('option');
                opt.innerHTML = simulationsObj[simulation].getLabel();
                opt.id = simulation;
                document.getElementById("exampleSelector").appendChild(opt);
            }
        }();

        document.getElementById('pageblock').style.display = "none";

        // add custom UI control
        var myCustomControl = new H.ui.Control();
        var prevButtonControl = new H.ui.Control();
        var nextButtonControl = new H.ui.Control();
        //Also an overlay panel
        var myCustomPanel = new H.ui.base.OverlayPanel();
        var prevButtonPanel = new H.ui.base.OverlayPanel();
        var nextButtonPanel = new H.ui.base.OverlayPanel();
        myCustomPanel.addClass("commentControl");
        prevButtonPanel.addClass("commentControl");
        nextButtonPanel.addClass("commentControl");
        //Also a button that opens the overlay panel on click and closes on next click
        var myCustomButton = new H.ui.base.PushButton({
			label: "",
			onStateChange: function(evt) { }
        });
        var prevButton = new H.ui.base.PushButton({
			label: "<",
			onStateChange: function(evt) {
				exampleSelect(-1);
			}
        });
        var nextButton = new H.ui.base.PushButton({
			label: ">",
			onStateChange: function(evt) {
				exampleSelect(1);
			}
        });
        myCustomButton.addClass("commentControl");
        prevButton.addClass("commentControl");
        nextButton.addClass("commentControl");
        //Add the button and the panel to the control
        myCustomControl.addChild(myCustomButton);
        myCustomControl.addChild(myCustomPanel);
        prevButtonControl.addChild(prevButton);
        nextButtonControl.addChild(nextButton);
        prevButtonControl.addChild(prevButtonPanel);
        nextButtonControl.addChild(nextButtonPanel);
        //Set the position of the control in the UI's layout
        myCustomControl.setAlignment("top-right");
        prevButtonControl.setAlignment("top-right");
        nextButtonControl.setAlignment("top-right");
        ui.addControl("nextButtonControl", nextButtonControl);
        ui.addControl("myCustomControl", myCustomControl);
        ui.addControl("prevButtonControl", prevButtonControl);
        myCustomButton.setVisibility(false);
        prevButton.setVisibility(false);
        nextButton.setVisibility(false);
        var currCaseNum = 0;
        /**
        *	When a sample is selected, show it in the destinations list
        */
        function exampleSelect(caseNum) {
            if(caseNum == 0){
                currCaseNum = 0;
            }else{
                currCaseNum = currCaseNum + caseNum;
            }
            var me = document.getElementById('exampleSelector');
            destinationsTextArea.value = simulationsObj[me.selectedOptions[0].id].getRoutes()[currCaseNum].getContent();
            if(simulationsObj[me.selectedOptions[0].id].getRoutes()[currCaseNum].hasParams()){
                document.getElementById('addtlparams').value = simulationsObj[me.selectedOptions[0].id].getRoutes()[currCaseNum].getParams();
            }else{
                setDefaultValueForOtherFields(me.selectedOptions[0].id);
            }
			if(simulationsObj[me.selectedOptions[0].id].getRoutes()[currCaseNum].hasType()){
				document.getElementById('vehicleType').value = simulationsObj[me.selectedOptions[0].id].getRoutes()[currCaseNum].getType();
			}

            //There are multiple examples in the simulation
            if(simulationsObj[me.selectedOptions[0].id].getRoutes().length > 1){

                console.log("Description: ");
                //Prepare next and prev buttons
                if(currCaseNum < simulationsObj[me.selectedOptions[0].id].getRoutes().length-1){
                    nextButton.setVisibility(true);
                }else{
                    nextButton.setVisibility(false);
                }
                if(currCaseNum !=0){
                    prevButton.setVisibility(true);
                }else{
                    prevButton.setVisibility(false);
                }
            }else{
                prevButton.setVisibility(false);
                nextButton.setVisibility(false);
            }
            if(simulationsObj[me.selectedOptions[0].id].getComments(currCaseNum)){
                myCustomButton.setLabel(simulationsObj[me.selectedOptions[0].id].getComments(currCaseNum));
                myCustomButton.setVisibility(true);

                console.log(simulationsObj[me.selectedOptions[0].id].getComments(currCaseNum));
            }else{
                myCustomButton.setLabel("");
                myCustomButton.setVisibility(false);
            }
            parseWaypointsFromText("destinations");
            calculateRoute();
        }

        /**
        *   A waypoint for display using markers
        */
        function Waypoints(idx, lat, lng, options, prefix) {
            this.idx = idx;
            this.lat = lat;
            this.lng = lng;
            this.prefix = prefix;
            this.options = options;

            /**
            *   Return a waypoint text. Eg. waypoint0=geo!50,8...
            */
            this.getWaypoint = function() {
                return "&waypoint" + idx + "=" + ((prefix)?prefix:"") + parseFloat(this.lat).toFixed(6) + "," + parseFloat(this.lng).toFixed(6) + ((this.bonusDef != 'none' && this.bonusDef != undefined && this.bonusDef != "") ? (";" + this.bonusDef) : "") + "\n";
            };

        }

        /**
            Clears any previous result
        */
        function clearPreviousResult() {
            feedbackTxt.innerHTML = '';
            try {
                group.removeAll();
                warningsGroup.removeAll();
                spaceGroup.removeAll();
                spaceGroupB.removeAll();
                elapsedTimeGroup.removeAll();
                groupClickedWaypoints.removeAll();
            } catch (e) {
                console.log("Failed to clear previous result: " + e);
            }
        }

        /**
        *   Read the destinations text and parse into waypoints
        *   @param documentId - the document id which should be used to parse the waypoints from 
        *   @see Waypoints
        */
        function parseWaypointsFromText(documentId) {
            var tempwaypointArr = [];
            var textAreaWithWaypoints = document.getElementById(documentId);
            if (textAreaWithWaypoints.value.trim() != "") {
				var destinationsWithoutLineBreaks = textAreaWithWaypoints.value.trim().replace(/\r*\n/g, '').trim().substring(1);
                var rawDestArray = destinationsWithoutLineBreaks.split(/&/);
                for (var i = 0; i < rawDestArray.length; i++) {
                    if(rawDestArray[i].indexOf("waypoint") >= 0) {
                        var rawDestination = rawDestArray[i]; // &waypoint0=geo!50.23232,6.434343;taketo:5
                        if(new RegExp("(?:" + "=" + ")(.*?)(?:" + ";|$" + ")", "ig").exec(rawDestination) !== null) {
                            var coordWithPrefix = (new RegExp("(?:" + "=" + ")(.*?)(?:" + ";|$" + ")", "ig").exec(rawDestination)[1]).split("!");
                            var coord = coordWithPrefix[(coordWithPrefix.length - 1)].split(",");
                            var prefix = (coordWithPrefix[(coordWithPrefix.length - 2)] || "");
                            prefix = (prefix) ? prefix + '!' : prefix;
                            var wayPointIdx = new RegExp("(?:" + "waypoint" + ")(.*?)(?:" + "=" + ")", "ig").exec(rawDestination)[1];
                            var options = (rawDestination.indexOf(";") > -1) ? (rawDestination.substr(rawDestination.indexOf(";") + 1)) : "";
                            tempwaypointArr.push(new Waypoints(wayPointIdx, coord[0], coord[1], options, prefix));
                        }
                    }
                }
            }
            waypointsArr = tempwaypointArr;
            createMarkersForWaypoints();
        }

        /**
        *   If Markers were created by clicking on the Map, then populate the text area with this information
        */
        function refreshWaypointText() {
            destinationsTextArea.value = "";
            for (var wpIdx in waypointsArr) {
                destinationsTextArea.value += waypointsArr[wpIdx].getWaypoint();
            }
        }

        function setDefaultValueForOtherFields(id){
           if (id === 'fraDarmstadtDriverRestTime'){
                document.getElementById("addtlparams").value = "&restTimes=900,1200,2400,2100";
                document.getElementById("vehicleType").value = "car";
                document.getElementById('alternatives').value = 0; //set alternatives to zero because alternatives are not supported with the requests having intermediate points
                truckSelect();
                setDepartureNow();
           }else if (id === 'fraTruckShouldWaitOnSunday'){
                document.getElementById("vehicleType").value = "truck";
                truckSelect();
                document.getElementById("addtlparams").value = "";
                document.getElementById("limitedWeight").value = "10"; //10t truck cannot drive on Sunday in Germany
                document.getElementById("departure").value = "2017-11-12T13:45:00"; // Sunday because truck more than 7.5t cannot drive on Sunday in Germany
                document.getElementById('alternatives').value = 0; //set alternatives to zero because alternatives are not supported with the requests having intermediate points
           }else if (id === 'fraStopOver' || id === 'fraOpeningTime'){
                document.getElementById('addtlparams').value = "&driver_cost=5";
                document.getElementById("vehicleType").value = "car";
                document.getElementById('alternatives').value = 0; //set alternatives to zero because alternatives are not supported with the requests having intermediate points
                truckSelect();
                setDepartureNow();
           }else if (id === 'alternativesDemo'){
               document.getElementById('alternatives').value = 10;
               document.getElementById("vehicleType").value = "car";
           }else if (id === 'headingAndWSEParams'){
               document.getElementById('drivercost').value = "5";
               document.getElementById("vehiclecost").value = "1.1";
           }else if(id === 'excludeCountries'){
               document.getElementById('addtlparams').value = '&excludecountries=DEU,AUT,CZE';
               document.getElementById("vehicleType").value = "car";
           }else if(id === 'environmentalZones'){
			   document.getElementById('addtlparams').value = "&excludeZoneTypes=environmental&emissionType=4";
               document.getElementById("vehicleType").value = "car";			   
           }else if (id === 'relaxVehTypRestrToTurnIntoZeilFrankfurtWorking' || id === 'relaxVehTypRestrToTurnIntoZeilFrankfurtNotWorking'){
                if (id === 'relaxVehTypRestrToTurnIntoZeilFrankfurtWorking')
                    document.getElementById('addtlparams').value = "&ignoreWaypointVehicleRestriction=150";
                else
                    document.getElementById('addtlparams').value = "";
                document.getElementById("vehicleType").value = "truck";
                document.getElementById('alternatives').value = 0; //set alternatives to zero because alternatives are not supported with the requests having intermediate points
                setDepartureNow();
           }else{
                //document.getElementById("addtlparams").value = "&driver_cost=5";
                document.getElementById("addtlparams").value = "";
                document.getElementById("vehicleType").value = "car";
                document.getElementById('alternatives').value = 0; //set alternatives to zero because alternatives are not supported with the requests having intermediate points
                truckSelect();
                setDepartureNow();
           }
        }

        function setDepartureNow(){
            document.getElementById("departure").value = moment().format("YYYY-MM-DDTHH:mm:ss");
        }

        /**
        *   Read waypoint list and generate markers
        */
        function createMarkersForWaypoints() {
            groupClickedWaypoints.removeAll();
            for (var wpIdx in waypointsArr) {
				var number = waypointsArr[wpIdx].idx;
				var iconColor = "#1188DD";
				if (waypointsArr[wpIdx].seqNrOnRoute != undefined) {
					number = waypointsArr[wpIdx].seqNrOnRoute == -1 ? '-' : waypointsArr[wpIdx].seqNrOnRoute;
					iconColor = "#b366ff";
				}
                var marker = new H.map.Marker(waypointsArr[wpIdx], { icon: new H.map.Icon(createWaypointIcon(number, iconColor)) });
                groupClickedWaypoints.addObject(marker);
            }
            if (groupClickedWaypoints.getBoundingBox() && waypointsArr.length > 1){
                map.getViewModel().setLookAtData({
					bounds: groupClickedWaypoints.getBoundingBox()
				});
            }
        }

        function getUrlParameter(param) {
            var pageURL = window.location.search.substring(1);
            var urlVariables = pageURL.split('&');
            for (var i = 0; i < urlVariables.length; i++) {
                var parameterName = urlVariables[i].split('=');
                if (parameterName[0] == param) {
                    return parameterName[1];
                }
            }
            return null;
        }

	    var truckOverlayProvider = new H.map.provider.ImageTileProvider({
            label: "Tile Info Overlay",
            descr: "",
            min: 12,
            max: 20,
            getURL: function(col, row, level) {
                server_rr++;
                if (server_rr > 4) server_rr = 1;
                return ["https://",
                    server_rr,
                    ".base.maps.api.here.com/maptile/2.1/truckonlytile/newest/normal.day/",
                    level,
                    "/",
                    col,
                    "/",
                    row,
                    "/256/png8",
                    "?style=fleet",
                    "&app_code=",
                    app_code,
                    "&app_id=",
                    app_id
                ].join("");
            }
        });
        var truckOverlayLayer = new H.map.layer.TileLayer(truckOverlayProvider);
		map.addLayer(truckOverlayLayer);

        /**
         * Show and hide truck restrictions
         */
         function truckSelect() {
            if (document.getElementById("truckrestr").checked) map.addLayer   (truckOverlayLayer);
            else                                              try {  map.removeLayer(truckOverlayLayer); } catch (exc) {console.log("Failed to remove truck overlay layer: " + exc);}
        }

        /**
         * Show and hide time along route
         */
        function timeAlongRouteSelect() {
            if (document.getElementById("linkTime").checked) map.addObject   (elapsedTimeGroup);
            else                                       try { map.removeObject(elapsedTimeGroup); } catch (exc) {console.log("Failed to remove elapsed time group: " + exc)}
        }

        /**
         * Function collects truck attributes in one object
         */
        var truckParameters = function(vehicleType) {
            var p = {};

            if (vehicleType === "truck") {
            	
                var lWeight = parseFloat(document.getElementById("limitedWeight").value);
                var aWeight = parseFloat(document.getElementById("weightPerAxle").value);
                var height = parseFloat(document.getElementById("height").value);
                var width = parseFloat(document.getElementById("width").value);
                var length = parseFloat(document.getElementById("length").value);

                if (isNaN(lWeight)) lWeight = 0;
                if (isNaN(aWeight)) aWeight = 0;
                if (isNaN(height)) height = 0;
                if (isNaN(width)) width = 0;
                if (isNaN(length)) length = 0;

                var hazard = [];
                if (document.getElementById('explosive').checked)
                    hazard.push("explosive");
                if (document.getElementById('gas').checked)
                    hazard.push("gas");
                if (document.getElementById('flammable').checked)
                    hazard.push("flammable");
                if (document.getElementById('combustible').checked)
                    hazard.push("combustible");
                if (document.getElementById('organic').checked)
                    hazard.push("organic");
                if (document.getElementById('poison').checked)
                    hazard.push("poison");
                if (document.getElementById('radioActive').checked)
                    hazard.push("radioActive");
                if (document.getElementById('corrosive').checked)
                    hazard.push("corrosive");
                if (document.getElementById('poisonousInhalation').checked)
                    hazard.push("poisonousInhalation");
                if (document.getElementById('harmfulToWater').checked)
                    hazard.push("harmfulToWater");
                if (document.getElementById('other').checked)
                    hazard.push("other");

                hazard = hazard.join(",");

                if (hazard.length > 0) p["shippedHazardousGoods"] = hazard;
                if (aWeight > 0) p["weightPerAxle"] = aWeight + "t";
                if (lWeight > 0) p["limitedWeight"] = lWeight + "t";
                if (height > 0) p["height"] = height + "m";
                if (width > 0) p["width"] = width + "m";
                if (length > 0) p["length"] = length + "m";

                p["trailersCount"] = document.getElementById('hasTrailer').checked ? "1" : "0";
            }

            return p;
        };

        function getDestinationParamArr() {
            if (document.getElementById("destinations").value != "")
                return document.getElementById("destinations").value.trim().split(/\n+/g);
            else return "";
        }

        /**
        *	Calculate route
        */
        function calculateRoute() {
            Spinner.showSpinner();
            var url;
            if(document.getElementById('simple-mode-radio').checked === true) {
                parseWaypointsFromText("destinations");
                var addtlparams= document.getElementById('addtlparams').value.trim();
                url = document.getElementById("endpoint").value + '?' + addtlparams;
                var destArr = getDestinationParamArr();
                for (var destIdx in destArr) url += destArr[destIdx];
                var truckRawParams = truckParameters(document.getElementById('vehicleType').value);
                var vehicleType = document.getElementById('vehicleType').value;
                var traffic     = document.getElementById('traffic'    ).value;
                var motorway    = document.getElementById('motorway'   ).value;
                var toll        = document.getElementById('toll'       ).value;
                var boatFerry   = document.getElementById('boatFerry'  ).value;
                var railFerry   = document.getElementById('railFerry'  ).value;
                var driverCost = parseFloat(document.getElementById("drivercost").value);
                var vehicleCost = parseFloat(document.getElementById("vehiclecost").value);
                var alternatives = parseFloat(document.getElementById("alternatives").value);
                var truckParams = "";
                for (var prop in truckRawParams) truckParams += "&" + prop + "=" + truckRawParams[prop];
                url += "&mode=fastest;" + vehicleType + ";traffic:" + traffic;
                if( motorway  != 1) url += ";motorway:"  + motorway;
                if (toll      != 1) url += ";tollroad:"  + toll;
                if (boatFerry != 1) url += ";boatFerry:" + boatFerry;
                if (railFerry != 1) url += ";railFerry:" + railFerry;
                var departure = document.getElementById("departure").value;
                if (departure != "") url += "&departure=" + departure;
                var arrival = document.getElementById("arrival").value;
                if (arrival != "") url += "&arrival=" + arrival;

                if (!isNaN(driverCost) && driverCost !== "") url = url + "&driver_cost=" + driverCost;
                if (!isNaN(vehicleCost) && vehicleCost !== "") url = url + "&vehicle_cost=" + vehicleCost;
                if (alternatives !== "") url = url + "&alternatives=" + alternatives;


                url += truckParams;
            } else {
                url = document.getElementById("completeUrl").value;
                if(url.length == 0 || url.indexOf("/calculateroute.json?") == -1) {
                    feedbackTxt.innerHTML = "<font color=\"red\">No valid URL given</font>";
                    feedbackTxt.innerHTML += "<br/>";
                    Spinner.hideSpinner();
                    return;
                }               
            }
            if( url.indexOf("&app_id") == -1 && url.indexOf("&app_code") == -1) url += '&app_id=' + app_id + '&app_code=' + app_code;
            $.ajax({
                url: url,
                dataType: "json",
                async: true,
                type: 'get',
                success: function(data) {
                    parseRoutingResponse(data);
                    Spinner.hideSpinner();
                    map.getViewPort().resize();
                },
                error: function(xhr, status, e) {
                    var errorObj = "";
                    if(xhr.responseJSON && xhr.responseJSON.issues) {
                        errorObj = xhr.responseJSON.issues;
                    } else if(xhr.responseJSON && xhr.responseJSON.errors){
                        errorObj = xhr.responseJSON.errors;
                    }
                    var errorResp = (errorObj[0] || {
                        "message": "unknown error occured"
                    });
                    if(xhr.responseJSON && xhr.responseJSON.searchSpace != undefined) {
                        for(var k = 0; k < xhr.responseJSON.searchSpace.length; k++) {
                            var split = xhr.responseJSON.searchSpace[k].trim().split(",");
                            var lat = parseFloat(split[0]) / 100000.0;
                            var lon = parseFloat(split[1]) / 100000.0;
                            var m = new H.map.Marker({ lat: lat, lng: lon }, 
                            {
                                icon: circle
                            });
                            spaceGroup.addObject(m);
                        }
                    }
                    if(xhr.responseJSON && xhr.responseJSON.searchSpaceB != undefined) {
                        for(var k = 0; k < xhr.responseJSON.searchSpaceB.length; k++) {
                            var split = xhr.responseJSON.searchSpaceB[k].trim().split(",");
                            var lat = parseFloat(split[0]) / 100000.0;
                            var lon = parseFloat(split[1]) / 100000.0;
                            var m = new H.map.Marker({ lat: lat, lng: lon }, 
                            {
                                icon: circleB
                            });
                            spaceGroupB.addObject(m);
                        }
                    }
                    feedbackTxt.innerHTML = "<font color=\"red\">" + errorResp.message + "</font>";
                    feedbackTxt.innerHTML += "<br/>";
                    routeCalculatonErrorCaseShowClosedLocationReached(errorResp.message);
                    Spinner.hideSpinner();
                    map.getViewPort().resize();
                }
            });
        }

        var baseTime;
        var baseDist;
        var threshold = 0.08;
        /**
        *  Parse the routing response
        */
        function parseRoutingResponse(resp) {
            group.removeAll();
            warningsGroup.removeAll();
            elapsedTimeGroup.removeAll();

            var zIndex = 1;
            routeLinkHashMap = new Object();
            var remainingTimeAtStartOfRoute = 0;
            
            /**
            *   draw the route
            */
            baseTime = resp.response.route[0].summary.baseTime;
            baseDist = resp.response.route[0].summary.distance;
            for (var r = 0; r < resp.response.route.length; r++) {
                if(((resp.response.route[r].summary.baseTime - baseTime)/baseTime) > threshold){
                    continue;
                }
                for (var k = 0; k<resp.response.route[r].leg.length; k++){
                    if (document.getElementById("showManeuvers").checked) {
                        var maneuvers = resp.response.route[0].leg[k].maneuver
                        for (var i in maneuvers) {
                            var lat = maneuvers[i].position.latitude;
                            var lon = maneuvers[i].position.longitude;
                            var point = new H.geo.Point(parseFloat(lat), parseFloat(lon));
                            var instr = maneuvers[i].instruction.replace(new RegExp("</span>", 'g'), "").replace(new RegExp('<span class="[a-z\-]+">', 'g'), "");
                            var marker = new H.map.Marker(point, { icon: createIconMarker(maneuvers[i].travelTime + " seconds", instr) });
                            group.addObject(marker);
                        }
                    }
                   
                }
            }
            displaySummary(resp.response.route[0]);
            
            // create link objects
			var previousTime = "";
            for (var r = 0; r < resp.response.route.length; r++) {
                
                if(((resp.response.route[r].summary.baseTime - baseTime)/baseTime) > threshold){
                    //continue;
                }
//                console.log("route: " + r + ", ETA: " + humanReadabletime(resp.response.route[r].summary.baseTime) + ", " + humanReadableDist(resp.response.route[r].summary.distance));
                //var routeColor = (r==0)? ('rgba(255, 255, 255, 0)') : ("rgba("+(Math.floor((Math.random() * 255) + 1)) + ","+ (Math.floor((Math.random() * 255) + 1)) +","+ (Math.floor((Math.random() * 255) + 1)) +","+ 1 + ")");
                var routeColor = ("rgba("+(Math.floor((Math.random() * 255) + 1)) + ","+ (Math.floor((Math.random() * 255) + 1)) +","+ (Math.floor((Math.random() * 255) + 1)) +","+ 1 + ")");
                for(var k = 0; k<resp.response.route[r].leg.length; k++){
                    
                    for (var m = 0; m < resp.response.route[r].leg[k].link.length; m++) {
                        // only add new link if it does not exist so far - so alternatives are not drawn multiple times
                        var linkId = (resp.response.route[r].leg[k].link[m].linkId.lastIndexOf("+", 0) === 0 ? resp.response.route[r].leg[k].link[m].linkId.substring(1) : resp.response.route[r].leg[k].link[m].linkId);
                        if (routeLinkHashMap[linkId] == null) {
                            var strip = new H.geo.LineString(),
                                shape = resp.response.route[r].leg[k].link[m].shape,
                                l = shape.length;
                            for (var i = 0; i < l; i += 2) {
                                strip.pushLatLngAlt(shape[i], shape[i + 1], 0);
                            }
                            var routeStyle = {
                                style: {
                                        lineWidth: (routeStroke - (2)), // alternatives get smaller line with
                                        strokeColor: routeColor,
                                        lineCap: 'butt'
                                    }
                                };
                            var link = new H.map.Polyline(strip, routeStyle);
							link.setArrows(true);
                            link.$routeStyle = routeStyle;
                            if(m === 0){
                                remainingTimeAtStartOfRoute = resp.response.route[r].leg[k].link[m].remainTime;
                            }

                            var elapsedTime = remainingTimeAtStartOfRoute - resp.response.route[r].leg[k].link[m].remainTime;
                            
                            // show the elapsed time (time since the route starts) at each link
							var time = humanReadabletimeShort(elapsedTime);
							if (time != previousTime) {
								elapsedTimeGroup.addObject(new H.map.Marker(link.getBoundingBox().getCenter(), {icon: createTimeIcon("#000000", time, 17)}));
								previousTime = time;
							}

                            link.$linkId = resp.response.route[r].leg[k].link[m].linkId;
                            link.$routeNum = r;
                            link.$ETA = resp.response.route[r].summary.travelTime;
                            //The router can send back links ids with "-" or "+" prefix: only "-" prefix is kept and stored in this HashMap, the "+" is removed
                            routeLinkHashMap[linkId] = link;
                            legLinkHashMap[linkId] = resp.response.route[r].leg[k].link[m];
                            // add event listener to link
                            

                            link.addEventListener('tap', createTapLinkHandler(link));
                            link.addEventListener('pointerenter', createPointerEnterLinkHandler(link));
      			            link.addEventListener('pointerleave', createPointerLeaveLinkHandler(link));
                            group.addObject(link);
                        }
                    }
                }
            }

            if(resp.searchSpace != null) {
				for(var k = 0; k < resp.searchSpace.length; k++) {
                    var split = resp.searchSpace[k].trim().split(",");
                    var lat = parseFloat(split[0]) / 100000.0;
					var lon = parseFloat(split[1]) / 100000.0;
					var m = new H.map.Marker({ lat: lat, lng: lon }, 
                    {
                        icon: circle
                    });
                    spaceGroup.addObject(m);
                }
            }
            if(resp.searchSpaceB != null) {
                for(var k = 0; k < resp.searchSpaceB.length; k++) {
                    var split = resp.searchSpaceB[k].trim().split(",");
                    var lat = parseFloat(split[0]) / 100000.0;
					var lon = parseFloat(split[1]) / 100000.0;
                    var m = new H.map.Marker({ lat: lat, lng: lon }, 
                    {
                        icon: circleB
                    });
                   spaceGroupB.addObject(m);
                }
            }

			// show toll costs
			if (resp.response.route[0].tollCost != null && resp.response.route[0].tollCost.costsByCountryAndTollSystem != null) {
				showTollCost(resp.response.route[0].tollCost.costsByCountryAndTollSystem, resp.response.route[0].cost);
			}
			// highlight toll booths
			for (var i = 0; i < resp.response.route.length; i++) {
				if (resp.response.route[i].tollCost) {
					highlightTollBoothsAndLinks(resp.response.route[i].tollCost.routeTollItems, i);
				}
			}
			
           //add stop icon for each waypoint with stopover time
           if (resp.response.route[0].leg.length > 0) {
                var wayPointsArr = getDestinationParamArr();
                for (var wayPoint in wayPointsArr) {
                    var wp = wayPointsArr[wayPoint];
                    if(wp.indexOf('stopOver,') !== -1){
                        var stopOverDuration = wp.substring(wp.indexOf('stopOver,'),wp.indexOf('!'));
                        stopOverDuration = parseInt(stopOverDuration.replace(/[^0-9\.]/g,''),10);//replace any non digit character with empty string
                        var wayPointLocation = extractWayPointCoordinates(wp);
                        var wayPointCoordinates = wayPointLocation.trim().split(',');
                        var point = new H.geo.Point(parseFloat(wayPointCoordinates[0]), parseFloat(wayPointCoordinates[1]));
                        var marker = new H.map.Marker(point, { icon: createWarningIconMarker('StopOver', 'StopOver Delay for '+stopOverDuration+' sec', 'StopOver') });
                        warningsGroup.addObject(marker);
                    }
                }
           }

           // add warnings message only for driver rest times, sleeping when vehicle cannot enter a link due to some restriction, or delay at waypoint
           var warnings = resp.response.warnings;
           if (warnings){
                //if there are multiple legs in the response then the routeLinkSeqNum goes across the legs for example.,
                //if the warning message says that we took the break at the routeLinkSeq = 20 and the first leg contains
                //12 links and the 2nd leg contains 10 links then the routeLinkSeq number goes with the number 13 in the 
                //2nd leg and it represents that at 8th link of the 2nd leg we took the break
                var combinedLegs = [];
                for(var l = 0; l<resp.response.route[0].leg.length; l++){
                    combinedLegs = combinedLegs.concat(resp.response.route[0].leg[l].link);
                }
                for (var w=0; w<warnings.length; w++) {
                    var warningMsg = warnings[w].message;
                    var warningCode = warnings[w].code;
                    if (warningMsg){
                      if (warnings[w].routeLinkSeqNum !== -1) {
                            var routeLinkSeqNum = warnings[w].routeLinkSeqNum;
                            if (routeLinkSeqNum){ //routeLinkSeqNum = "routeLinkSeqNum 897"
                                var actualLinkSeqNum = routeLinkSeqNum - 1; //because the response links array starts at zero index
                                if(routeLinkSeqNum){
                                    var routeLinksLength = combinedLegs.length;   //resp.response.route[0].leg[l].link.length;
                                    if (actualLinkSeqNum < routeLinksLength){
                                        var shape = combinedLegs[actualLinkSeqNum].shape; //resp.response.route[0].leg[l].link[actualLinkSeqNum].shape;
                                        if (shape){
                                            var shapeLength = shape.length;
                                            var lastLon = shape[shapeLength-1];
                                            var lastLat = shape[shapeLength-2];
                                            var point = new H.geo.Point(parseFloat(lastLat), parseFloat(lastLon));
                                            var warningObj = new Warning(warnings[w]);
                                            var marker = new H.map.Marker(point, { icon: warningObj.getIcon() });
                                            warningsGroup.addObject(marker);
                                        }
                                    }
                                }    
                            }
                        }
                    }
                }
           }       

			/**
             * add the seqNrOnRoute to each waypoint
             */
			if (resp.response.route.length > 0) {
                for (var w = 0; w < resp.response.route[0].waypoint.length; w++) {
					var seqNrOnRoute = resp.response.route[0].waypoint[w].seqNrOnRoute;
					for (var wa = 0; wa < waypointsArr.length; wa++) {
						if (waypointsArr[wa].idx == w) {
							waypointsArr[wa].seqNrOnRoute = seqNrOnRoute;
						}
					}
                }
				createMarkersForWaypoints();
            }
        }

        /**
            In case there is an route calculation error and the service returns the closest location it could reach towards the destination, we parse out the location and show it on the map
        */
        function routeCalculatonErrorCaseShowClosedLocationReached(errorRespMessage) {
            if(errorRespMessage !== null && errorRespMessage.indexOf("closest link to destination reached") != -1) {
                // f.e. Couldn't reach way point 1 (start links -1022577279 1022577279 dest links -1062429931 1062429931 ), closest link to destination reached: -1022583937 at 51.9772/7.61211, issues: gate
                var sub = errorRespMessage.substring(errorRespMessage.indexOf("destination reached:") + 20);
                // sub is now " -1022583937 at 51.9772/7.61211, issues: gate"
                sub = sub.substring(sub.indexOf("at ") + 3);
                // sub is now "51.9772/7.61211, issues: gate"
                var locationCoordinate = sub; // some errors don't have an issue attached and they do not have text after the coordinate
                var issueText = "Closest location reached during route calculation.";
                if(locationCoordinate.indexOf(",") != -1) {
                    issueText = issueText + " " + locationCoordinate.substring(locationCoordinate.indexOf(",") + 1);
                    locationCoordinate = locationCoordinate.substring(0, locationCoordinate.indexOf(","));
                }
                var loc = locationCoordinate.split("/");
                var svgMarker = '<svg xmlns="http://www.w3.org/2000/svg" width="{{{WIDTH}}}" height="{{{HEIGHT}}}"><g transform="scale({{{SCALE}}})"><path id="marker_ground_shaddow" fill-opacity="0.2" fill="#000" d="m14.609755992889404,22.544715881347656 c0,1.7000000000000002 -2.7,3 -6,3 c-3.3,0 -6,-1.3 -6,-3 c0,-1.7000000000000002 2.7,-3 6,-3 c3.3,0 6,1.3 6,3 z" class=""/><text id="destination_label_text" stroke="#FF6A00" stroke-opacity="1" stroke-width="0.25" y="8.296977452945708" x="25.288722365205288" font-family="Nimbus Sans L,sans-serif" fill="#FF6A00" font-weight="bold" font-size="12" class="" transform="matrix(1.61048, 0, 0, 1.5062, -15.4331, 0.775187)">_TEXT_</text><path id="pole" fill="#FF6A00" fill-opacity="1" stroke="#FF6A00" stroke-opacity="1" stroke-width="2" stroke-dasharray="none" stroke-linejoin="miter" stroke-linecap="butt" stroke-dashoffset="" fill-rule="nonzero" opacity="1" marker-start="" marker-mid="" marker-end="" d="M8.58934497833252,22.524281079286993 L8.58934497833252,22.524281079286993 zL8.58934497833252,1.4630391510024836 " class="" filter=""/><path id="triangle" fill="none" stroke="#FF6A00" stroke-opacity="1" stroke-width="2" stroke-dasharray="none" stroke-linejoin="miter" stroke-linecap="butt" stroke-dashoffset="" fill-rule="nonzero" opacity="1" marker-start="" marker-mid="" marker-end="" d="M8.588785486785127,1.873892068862915 L1.6443515900487569,7.058241844177246 L8.588474289653277,11.463082313537598 L8.588785486785127,1.873892068862915 z" class=""/></g></svg>';
                var locationMarkerScale = 0.9;
                // adapt text
                svgMarker = svgMarker.replace(/_TEXT_/g, issueText);
                var textLength = issueText.length;
                var baseWidth = 39 + (textLength * 10.4); // ca 10.4 px per letter
                var baseHeigth = 26;
                var baseAnchorX = 8;
                var baseAnchorY = 22;		
                // scale the marker
                svgMarker = svgMarker.replace('{{{SCALE}}}', locationMarkerScale);
                svgMarker = svgMarker.replace('{{{WIDTH}}}', locationMarkerScale * baseWidth);
                svgMarker = svgMarker.replace('{{{HEIGHT}}}', locationMarkerScale * baseHeigth);
                var icon = new H.map.Icon(svgMarker, { anchor: new H.math.Point(locationMarkerScale * baseAnchorX / 2, locationMarkerScale * baseAnchorY)});
                var marker = new H.map.Marker({ lat: loc[0], lng: loc[1] }, { icon: icon }, false);
                warningsGroup.addObject(marker);
            }
        }

		function showTollCost(costByCountryAndTollSystem, costs) {
			// total cost
			feedbackTxt.innerHTML += "<br/><span style=\"font-weight: bold;border: 1px solid;padding: 2px;\">COSTS FOR MAIN ROUTE</span>";
			if (!costs) {
				feedbackTxt.innerHTML += "<br/><br/>None.";
			} else {
				feedbackTxt.innerHTML += "<br/><br/><span>Total Cost: " + costs.totalCost + " " + costs.currency + "</span>";
				feedbackTxt.innerHTML += "<ul><li>Driver Cost: " + costs.details.driverCost + " " + costs.currency + "</li></ul>";
				feedbackTxt.innerHTML += "<ul><li>Vehicle Cost: " + costs.details.vehicleCost + " " + costs.currency + "</li></ul>";
				feedbackTxt.innerHTML += "<ul><li>Toll Cost: " + costs.details.tollCost + " " + costs.currency + "</li></ul>";
			}
			// route detail cost
			feedbackTxt.innerHTML += "<br/><span style=\"font-weight: bold;border: 1px solid;padding: 2px;\">TOLL COST FOR MAIN ROUTE</span>";
			if (costs.details.tollCost == 0.0) {
				feedbackTxt.innerHTML += "<br/><br/>None.<br/><br/>";
			}
			if (costByCountryAndTollSystem != null) {
				var feedback = "";
				feedback += "<br/>";
				for (var j = 0; j < costByCountryAndTollSystem.length; j++) {
					feedback += "<br/><span style=\"font-weight: bold;border: 1px solid;padding: 2px;\">" + costByCountryAndTollSystem[j].country + "</span>"
					feedback += "<ul><li>";
					if(costByCountryAndTollSystem[j].name != null && costByCountryAndTollSystem[j].name.trim().length > 0) {
						feedback += "Toll System " + costByCountryAndTollSystem[j].name + ": ";
					} else if(costByCountryAndTollSystem[j].tollSystemId != null && costByCountryAndTollSystem[j].tollSystemId.trim().length > 0) {
						feedback += "Toll System ID " + costByCountryAndTollSystem[j].tollSystemId + ": "
					} else {
						feedback += "Toll : ";
					}
					feedback += costByCountryAndTollSystem[j].amountInTargetCurrency + " " + costs.currency;
					feedback += "</li></ul>";
				}
				feedbackTxt.innerHTML += feedback;
			}
			if (costs.details.tollCost != 0.0) {
				feedbackTxt.innerHTML += "<br/><span style=\"font-weight: normal;color:" + rgb2hex(ppType_A_Color) + ";\">Paypoint Type A: Country wide toll - payed here.</span>";
				feedbackTxt.innerHTML += "<br/><span style=\"font-weight: normal;color:" + rgb2hex(ppType_a_Color) + ";\">Paypoint Type A: Country wide toll - payed somewhere else.</span>";
				feedbackTxt.innerHTML += "<br/><span style=\"font-weight: normal;color:" + rgb2hex(ppType_S_Color) + ";\">Paypoint Type S: Toll section from one toll booth or between two toll boths.</span>";
				feedbackTxt.innerHTML += "<br/><span style=\"font-weight: normal;color:" + rgb2hex(ppType_p_Color) + ";\">Paypoint Type p: Toll - payed somewhere else.</span>";
				feedbackTxt.innerHTML += "<br/><span style=\"font-weight: normal;color:" + rgb2hex(ppType_F_Color) + ";\">Paypoint Type F: Toll section belonging to a toll system.</span>";
				feedbackTxt.innerHTML += "<br/><span style=\"font-weight: normal;color:" + rgb2hex(ppType_K_Color) + ";\">Paypoint Type K: Toll section defined between junctions.</span>";
				feedbackTxt.innerHTML += "<br/><span style=\"font-weight: normal;color:" + rgb2hex(ppType_U_Color) + ";\">UFR: Usage fee required link(s).</span>";
			}
		}

		var ppType_A_Color = "rgba(255, 255, 000, 0.8)";
		var ppType_a_Color = "rgba(255, 216, 000, 0.8)";
		var ppType_S_Color = "rgba(255, 000, 000, 0.8)";
		var ppType_p_Color = "rgba(255, 127, 127, 0.8)";
		var ppType_F_Color = "rgba(214, 127, 255, 0.8)";
		var ppType_K_Color = "rgba(178, 000, 255, 0.8)";
		var ppType_U_Color = "rgba(000, 204, 000, 0.8)";
		var tollImage = document.createElement("img");
		tollImage.src = "/assets/icons/toll_20_10.png";
		var tollIcon = new H.map.Icon(tollImage, {anchor: new H.math.Point(0, 10)});

		function highlightTollBoothsAndLinks(routeTollItems, routeAlternative) {
			if (routeTollItems != null) {
				for (var i = routeTollItems.length - 1; i >= 0; i--) { // reverse order to get the main route on top
					var tollType = routeTollItems[i].tollType;
					var color = "rgba(0, 0, 0, 0)"; // unknown toll item type
					if      (tollType == 'A') color = ppType_A_Color;
					else if (tollType == 'a') color = ppType_a_Color;
					else if (tollType == 'S') color = ppType_S_Color;
					else if (tollType == 'p') color = ppType_p_Color;
					else if (tollType == 'F') color = ppType_F_Color;
					else if (tollType == 'K') color = ppType_K_Color;
					else if (tollType == 'U') color = ppType_U_Color;
					for (var j = 0; j < routeTollItems[i].linkIds.length; j++) {
						var tollstroke = 7 - routeAlternative; // route alternatives have a different stroke
						var link = routeLinkHashMap[routeTollItems[i].linkIds[j]];
						link.setStyle({strokeColor: color, lineWidth: tollstroke});
					}
					if (routeTollItems[i].tollStructures != null) {
						for (var j = 0; j < routeTollItems[i].tollStructures.length; j++) {
							var oneTollStructure = routeTollItems[i].tollStructures[j];
							var pos = new H.geo.Point(oneTollStructure.latitude, oneTollStructure.longitude);
							var tollMarker = new H.map.Marker(pos, { icon: tollIcon });
							group.addObject(tollMarker);
						}
					}
				}
			}
		}

        // Link selection display handlers
        function createPointerEnterLinkHandler(polyline){
            return function(evt){
                polyline.setStyle(HOVER_LINK_STYLE);
            };
        }
    
        function createPointerLeaveLinkHandler(polyline, routeStyle) {
            return function (e) {
                polyline.setStyle(polyline.$routeStyle.style);
            };
        }

        //LinkInfo display handler
        function createTapLinkHandler(polyline) {
            return function (e) {
                var strip = polyline.getStrip();
                var linkId = polyline.$linkId;
                var lowIndex = Math.floor((strip.getPointCount() - 1) / 2);
                var highIndex = Math.ceil(strip.getPointCount() / 2);
                var center;
                if (lowIndex === highIndex) {
                    center = strip.extractPoint(lowIndex);
                } else {
                    var lowPoint = strip.extractPoint(lowIndex);
                    var highPoint = strip.extractPoint(highIndex);
                    center = new H.geo.Point((lowPoint.lat + highPoint.lat ) / 2, (lowPoint.lng + highPoint.lng) / 2);
                }
                
                // Get the LinkId
                linkId= polyline.$linkId;
                routeId = polyline.$routeNum;
                ETA = polyline.$ETA;
                infoText= "Route: " + routeId + ", LinkId : " + linkId + "ETA: " + humanReadabletime(ETA);
                
                
                
                
                // Adding Link data to a Infobubble with text area formatting
                infoText="<div style='background-color:black;border:0;font-size:12px;max-width:400px;max-height:400px;'>"+infoText+"</div>";
            
                if (!linkDataInfoBubble){
                    linkDataInfoBubble = new H.ui.InfoBubble(center,{content: infoText});
                    ui.addBubble(linkDataInfoBubble);	
                }
                else {
                    linkDataInfoBubble.setPosition(center);
                    linkDataInfoBubble.setContent(infoText);
                }
                linkDataInfoBubble.open();
            };
        }
        // Info Bubbles for LinkInfo display
        var linkDataInfoBubble;
      	var HOVER_LINK_STYLE = {lineWidth: 12, strokeColor: 'rgba(0, 255, 50, 0.7)', lineJoin: 'round'};
    	var DEFAULT_LINK_STYLE = {lineWidth: (routeStroke - (1)), // alternatives get smaller line width
                                    strokeColor: "rgba(255, 255, 255, 0)",
                                    lineCap: 'butt'};

        var addPatternTimeControlToMap = function(mapUI) {
            var sumSecondsTimeTraffic = {
                    value: "0"
                },
                trafficTileProvider = new H.map.provider.ImageTileProvider({
                    getURL: function(x, y, level) {
                        var trafficHost = (secure ? "https" : "http") + "://tiles.traffic.api.here.com/traffic/6.0/tiles/",
                            url = trafficHost + level + "/" + x + "/" + y + "/256/png8?",
                            params = [
                                "app_code=" + app_code,
                                "app_id=" + app_id,
                                "compress=" + "true",
                                "pattern_time=" + this.sumSecondsTimeTraffic.value
                            ];
                        return url + params.join("&");
                    }.bind({
                        "sumSecondsTimeTraffic": sumSecondsTimeTraffic
                    })
                }),
                trafficTileLayer = new H.map.layer.TileLayer(trafficTileProvider),
                patternContainer = new H.ui.Control(),
                patternContainerEl,
                dOfWeekEl = document.querySelector("#dOfWeek"),
                hourEl = document.querySelector("#hour"),
                minutesEl = document.querySelector("#minutes"),
                chgTime = function() {
                    var dOfWeekEl = document.querySelector("#dOfWeek"),
                        hourEl = document.querySelector("#hour"),
                        minutesEl = document.querySelector("#minutes");
                    this.sumSecondsTimeTraffic.value = parseInt(dOfWeekEl.options[dOfWeekEl.selectedIndex].value) * 24 * 60 * 60 + parseInt(hourEl.options[hourEl.selectedIndex].value) * 60 * 60 + parseInt(minutesEl.options[minutesEl.selectedIndex].value) * 60;
                    this.trafficTileLayer.getProvider().reload(false);
                }.bind({
                    "trafficTileLayer": trafficTileLayer,
                    "sumSecondsTimeTraffic": sumSecondsTimeTraffic
                });


            mapUI.addControl("patternCont", patternContainer);
            patternContainerEl = patternContainer.getElement();

            patternContainer.setAlignment("right-top");

            var ctrlTimeEl = document.querySelector(".ctrl-time"),
                tSelectEl = document.querySelector(".tselect");

            tSelectEl.style.backgroundImage = "url(/assets/examples/traffic_timebw30x34s.png)";
            tSelectEl.addEventListener("click", function(e) {
                var contTimeEl = document.querySelector(".cont-time"),
                    bkgImg = this.tSelectEl.style.backgroundImage;

                if (bkgImg.indexOf("traffic_timebw30x34s") == -1) {
                    this.tSelectEl.style.backgroundImage = "url(/assets/examples/traffic_timebw30x34s.png)";
                    contTimeEl.style.display = "none";
                    map.removeLayer(this.trafficTileLayer);
                } else {
                    this.tSelectEl.style.backgroundImage = "url(/assets/examples/traffic_timebw30x34.png)";
                    contTimeEl.style.display = "block";
                    map.addLayer(this.trafficTileLayer);
                }
                /*background-image: url(../img/HLP_traffic_timebw30x34.png);*/
            }.bind({
                "tSelectEl": tSelectEl,
                "trafficTileLayer": trafficTileLayer
            }));

            dOfWeekEl.addEventListener("change", chgTime);
            hourEl.addEventListener("change", chgTime);
            minutesEl.addEventListener("change", chgTime);

            patternContainerEl.appendChild(ctrlTimeEl);

            patternContainer.setVisibility(true);
        };


        /**
         * Creates poly lines for interconnections
         * @param strip
         * @param num
         * @returns {H.map.Polyline}
         */
        var createPolylineForIndex = function(strip, num) {
            return new H.map.Polyline(strip, {
                style: {
                    lineWidth: 8,
                    strokeColor: "rgba(70, 105, 160, 0.8)",
                    fillColor: "rgba(120, 133, 160, 0.9)"
                }
            });
        };

        //add pattern time control to the map
        addPatternTimeControlToMap(ui);


        //draw marker for clicked waypoints
      var createWaypointIcon = function(number, iconColor) {
            return '<svg xmlns="http://www.w3.org/2000/svg" width="28px" height="36px">' +
			  '<path d="M 19 31 C 19 32.7 16.3 34 13 34 C 9.7 34 7 32.7 7 31 C 7 29.3 9.7 28 13 28 C 16.3 28 19' +
			  ' 29.3 19 31 Z" fill="#000" fill-opacity=".2"/>' +
			  '<path d="M 13 0 C 9.5 0 6.3 1.3 3.8 3.8 C 1.4 7.8 0 9.4 0 12.8 C 0 16.3 1.4 19.5 3.8 21.9 L 13 31 L 22.2' +
			  ' 21.9 C 24.6 19.5 25.9 16.3 25.9 12.8 C 25.9 9.4 24.6 6.1 22.1 3.8 C 19.7 1.3 16.5 0 13 0 Z" fill="#fff"/>' +
			  '<path d="M 13 2.2 C 6 2.2 2.3 7.2 2.1 12.8 C 2.1 16.1 3.1 18.4 5.2 20.5 L 13 28.2 L 20.8 20.5 C' +
			  ' 22.9 18.4 23.8 16.2 23.8 12.8 C 23.6 7.07 20 2.2 13 2.2 Z" fill="' + iconColor + '"/>' +
			  '<text font-size="11" font-weight="bold" fill="#fff" font-family="Nimbus Sans L,sans-serif" text-anchor="middle" x="45%" y="50%">' + number + '</text>' +
			  '</svg>';
        };


        var humanReadabletimeShort = function(timeSeconds) {
            if (timeSeconds < 3600) return Math.floor(timeSeconds / 60);
            else                    return Math.floor(timeSeconds / 3600) + ":" + padZerosNumbers(Math.floor((timeSeconds /   60) % 60), 2);
        };

        var humanReadableDist = function(distMeters) {
            if (distMeters < 1000)
                return distMeters + "m";
            else
                return (distMeters / 1000).toFixed(1) + "km";
        };

        var humanReadabletime = function(timeSeconds) {
            if (timeSeconds < 60)
                return timeSeconds + "s ";
            if (timeSeconds < 3600)
                return Math.floor((timeSeconds / 60)) + "min " + timeSeconds % 60 + 's';
            else
                return Math.floor((timeSeconds / 3600)) + "h " + Math.floor((timeSeconds / 60) % 60) + "min " + timeSeconds % 60 + 's';
        };

        var humanReadableCost = function(cost) {
			var sign = cost >= 0 ? "" : "-";
			cost = Math.abs(cost);
            if (cost < 1.0) return sign +                   "0." + padZerosNumbers(Math.floor(cost * 100.0)      , 2);
            else            return sign + Math.floor(cost) + "." + padZerosNumbers(Math.floor(cost * 100.0) % 100, 2);
        };

        var displaySummary = function(routeObj){
            feedbackTxt.innerHTML = '<table border=0><col width="auto"> <col width="auto">'
                                    + "<tr>"
                                    +"<td><b>Travel time:</b></td>" + "<td>" + humanReadabletime(routeObj.summary.travelTime) + "</td>"
                                    + "</tr>"
                                    + "<tr>"
									+ "<td><b>Distance:</b></td>" + "<td>" + humanReadableDist(routeObj.summary.distance)  + "</td>"
                                    + "</tr>"
                                    + "<tr>"
                                    + "<td><b>Departure:</b></td>" + "<td>" + humanReadableDataTimeFormat(routeObj.summary.departure) + "</td>"
                                    + "</tr>"
                                    + "<tr>"
                                    + "<td><b>Arrival:</b></td>" + "<td>" + humanReadableDataTimeFormat(routeObj.summary.arrival) + "</td>"
                                    + (routeObj.cost ? ("</tr>" + "<td><b>Cost:</b></td>" + "<td>" +  humanReadableCost(routeObj.cost.totalCost)+ "</td>") : '')
                                    + "</table>"
        }


        var humanReadableDataTimeFormat = function (dateTimeString){
		if (dateTimeString == undefined) return '';
            var dateTimeArr = dateTimeString.split('T');
            var properDate = dateTimeArr[0].split("-").reverse().join('/');
            var timeZone = parseInt(dateTimeArr[1].split("+")[1]);
            var properTime = dateTimeArr[1].split('+')[0] + '(GMT' + (timeZone<0?'-':'+' + timeZone) + ')';
            return properDate + ' ' + properTime;
        };

        //Extract the waypoint coordinates out of the waypoint if the waypoint is like waypoint1=stopOver,300!50.9,8.7;opening:600
        function extractWayPointCoordinates(waypoint){
            if (waypoint){
                if (waypoint.indexOf('!') !== -1){
                    waypoint = waypoint.substring(waypoint.indexOf('!')+1);
                }
                if (waypoint.indexOf(';') !== -1){
                    waypoint = waypoint.substring(0,waypoint.indexOf(';'));
                    //at this point we might have waypoint1=50.8,8.9 so replace the text and equal sign
                    if(waypoint.indexOf('=') !== -1 ){
                        waypoint = waypoint.substring(waypoint.indexOf('=')+1);
                    }
                }
            }
            return waypoint;
        }

        var createTimeIcon = function (color, text, height) {
            var div = document.createElement("div");
            var svg = '<svg xmlns="http://www.w3.org/2000/svg" width="56px" height="' + height + 'px">' +
                '<line x1="28"  y1="' + height + '" x2="28" y2="' + (height - 7) + '" stroke="' + color + '"/>' +
                '<text font-size="10" x="28" y="8" text-anchor="middle" fill="' + color + '">' +
                text + '</text>' +
                '</svg>';
            div.innerHTML = svg;
            return new H.map.Icon(svg, {anchor: {x : 28, y : height}});
        };
		
		// convert hex format to a rgb color
		function rgb2hex(rgb) {
			rgb = rgb.match(/^rgba?[\s+]?\([\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?/i);
			return (rgb && rgb.length === 4) ? "#" +
			("0" + parseInt(rgb[1], 10).toString(16)).slice(-2) +
			("0" + parseInt(rgb[2], 10).toString(16)).slice(-2) +
			("0" + parseInt(rgb[3], 10).toString(16)).slice(-2) : '';
        }
        
        // changes the input mode
        function changeInputMode(expertMode) {
            clearPreviousResult();
            if(expertMode === true) {
                document.getElementById('simple-mode-radio').checked=false;
                document.getElementById('expert-mode-radio').checked=true;
                document.getElementById('simple-mode-div').style.display = "none";
                document.getElementById('expert-mode-div').style.display = "block";
                expertModeEnabled = true;
                waypointsArr = [];
                parseWaypointsFromText('completeUrl');
            } else {
                document.getElementById('simple-mode-radio').checked=true;
                document.getElementById('expert-mode-radio').checked=false;
                document.getElementById('simple-mode-div').style.display = "block";
                document.getElementById('expert-mode-div').style.display = "none";
                expertModeEnabled = false;
                parseWaypointsFromText('destinations');
            }            
        }

    </script>
