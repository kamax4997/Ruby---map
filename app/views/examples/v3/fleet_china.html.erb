<% content_for :title, "Here Geocoding and Routing China" %>

<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

<div class="ctrl-panel">
	<span id="toggle-ctrl-panel" class="glyphicon glyphicon-menu-left"></span>
	<table class="searchBar">
		<tr>
			<td><h5>APP_ID:</h5></td>
			<td><input type="text" id="input-app_id" class="form-control" value="" onchange="mapInit()"/></td>
		</tr>
		<tr>
			<td><h5>APP_CODE:</h5></td>
			<td><input type="text" id="input-app_code" class="form-control" value="" onchange="mapInit()"/></td>
		</tr>
		<tr>
			<td><h5>Start:</h5></td>
			<td><input type="text" id="input-from" class="form-control"  name="" value="中国河北省保定市涞水县北龙门隧道" /></td>
		</tr>
		<tr>
			<td><h5>Destination:</h5></td>
			<td><input type="text" id="input-to" class="form-control"  name="" value="中国北京市东城区永定门东滨河路20号" /></td>
		</tr>
	</table>
	<table>
		<tr>
			<td>
				<select id="metric">
					<option value="1">Metric</option>
					<option value="2">Imperial</option>
				</select>
			</td>
			<td>
				<div class="checkbox nospace">
					<label><input id="showMultipleRoutes" type="checkbox" value="">Keep Previous Routes Displayed</label>
				</div>
			</td>
		</tr>
	</table>
	<table>
		<tr>
			<td colspan="2"> <h5>Options</h5></td>
		</tr>

		<tr>
			<td>Tollroads</td>
			<td>
				<select id="tollroads" >
					<option value="-3">Strict Exclude</option>
					<option value="-2">Soft Exclude</option>
					<option value="-1">Avoid</option>
					<option value="0" selected = "selected">Default</option>
				</select>
			</td>

			<td>Motorways</td>
			<td>
				<select id="motorways" >
					<option value="-3">Strict Exclude</option>
					<option value="-2">Soft Exclude</option>
					<option value="-1">Avoid</option>
					<option value="0" selected = "selected">Default</option>
				</select>
			</td>
		</tr>
		<tr>
			<td>Boat Ferries</td>
			<td>
				<select id="boatFerries" >
					<option value="-3">Strict Exclude</option>
					<option value="-2">Soft Exclude</option>
					<option value="-1">Avoid</option>
					<option value="0" selected = "selected">Default</option>
				</select>
			</td>

			<td>Rail Ferries</td>
			<td>
				<select id="railFerries" >
					<option value="-3">Strict Exclude</option>
					<option value="-2">Soft Exclude</option>
					<option value="-1">Avoid</option>
					<option value="0" selected = "selected">Default</option>
				</select>
			</td>
		</tr>
		<tr>
			<td>Tunnels</td>
			<td>
				<select id="tunnels" >
					<option value="-3">Strict Exclude</option>
					<option value="-2">Soft Exclude</option>
					<option value="-1">Avoid</option>
					<option value="0" selected = "selected">Default</option>
				</select>
			</td>

			<td>Dirt Roads</td>
			<td>
				<select id="dirtRoads" >
					<option value="-3">Strict Exclude</option>
					<option value="-2">Soft Exclude</option>
					<option value="-1">Avoid</option>
					<option value="0" selected = "selected">Default</option>
				</select>
			</td>
		</tr>
		<tr>
			<td>Route option</td>
			<td>
				<select id="routeOption" >
					<option value="fastest" selected = "selected">Fastet</option>
				</select>
			</td>
			<td>Traffic</td>
			<td>
				<select id="traffic" >
					<option value="enabled" selected = "selected">enabled</option>
					<option value="disabled">disabled</option>
				</select>
			</td>
		</tr>
		<tr>
			<td>Alternatives</td>
			<td><input type='text' id='alt' class="form-control" style="width:35px;" value='1' /></td>
		</tr>
		<tr>
			<td>Mode</td>
			<td>
				<select id="transitmode" onchange="removeAndStartRouting();">
					<option value="car" selected = "selected">car</option>
					<option value="pedestrian">pedestrian</option>
					<option value="publicTransport">Public Transport</option>
				</select>
			
			</td>
		</tr>
	</table>

	<table border="0">
		<tr>
			<td><input class="btn btn-default btn-xm" type="button" id="startRouting" value="route" onclick="removeAndStartRouting()"></td>
			<td><input class="btn btn-default btn-xm" type="button" id="capture" value="Capture" onclick="startCapture()"></td>
		</tr>
		<tr>
			<td id="distance"></td>
			<td id="time"></td>
		</tr>
	</table>
	<tr>
		<td>HLP Service releases which are used in this demo:</td>
		<td>
			<div id="releaseInfoTxt" value=""></div>
		</td>
	</tr>
	<tr>
		<td>Snapshot Container</td>
		<td>
			<div id="snapshotContainer" value="Used Service Releases:/n"></div>
		</td>
	</tr>
	
</div>

<div id="mapContainer"></div>
<div id="spinner"></div>
<div id="pageblock"></div>

<script>

	/*
	author domschuette
	(C) HERE 2018
	*/

	/**
	* Function to init the map once the appId/ appcode is provided
	**/
	var mapInit = function(){
		
		this.app_id = document.getElementById("input-app_id").value;
		this.app_code = document.getElementById("input-app_code").value;
		
		if(this.app_id == "" || this.app_code == "")
		{
			this.app_id = getUrlParameter( 'app_id' );
			this.app_code = getUrlParameter( 'app_code' );
		}
		
		if(this.app_id == "" || this.app_code == "")
		{
			return;
		}
		
		// Create a platform object to communicate with the HERE REST APIs
		this.platform = new H.service.Platform({
			app_id: app_id,
			app_code: app_code,
			useHTTPS: secure
		});
		// maptypes = platform.createDefaultLayers(hidpi ? 512 : 256, hidpi ? 320 : null),
		this.geocoder = this.platform.getGeocodingService(),
		this.router = this.platform.getRoutingService(),
		this.start = H.geo.Point(50.11208, 8.68342),
		this.destination = H.geo.Point(50.14041, 8.57211),
		this.lang = "en-GB",
		this.markerLayer = new H.map.Group(),
		this.dragMarkerLayer = new H.map.Group(),
		this.polylineLayer = new H.map.Group(),
		this.fenceLayer = new H.map.Group(),
		this.server_rr = 0,
		this.fence,
		this.currentPolyline,
		this.bLongClickUseForStartPoint = true,
		startMarker = null,
		destMarker = null;
		
		var mc = document.getElementById('mapContainer');
		mc.innerHTML = '';
		this.defaultLayers = platform.createDefaultLayers();
		this.map = new H.Map(mc, defaultLayers.normal.map, {
			center: new H.geo.Point(39.872319692276015, 116.42163440463315),
			zoom: 14,
			pixelRatio: hidpi ? 2 : 1
		});


		// Do not draw under control panel
		map.getViewPort().setPadding(0, 0, 0, $('.ctrl-panel').width());

		// add the layer for markers to the map
		map.addObject(markerLayer);
		map.addObject(polylineLayer);
		map.addObject(dragMarkerLayer);

		// add right click in map event listener
		map.addEventListener('contextmenu', function (e) {
			var rClickCoords = map.screenToGeo(e.viewportX, e.viewportY);
			var rClickCoordsStr = [rClickCoords.lat, rClickCoords.lng].join(",");
			function onSuccess(result) {
			    Spinner.hideSpinner();
				
				// get the address from Reverse Geocoder result
				var location = result.Response.View[0].Result[0];
				this.value = location.Location.Address.Label;
				var reverseGeocoded = location.Location.DisplayPosition;
				var line1 = "" + reverseGeocoded.Latitude + "," + reverseGeocoded.Longitude;
				var line2 = "";
				var coordiante = new H.geo.Point(reverseGeocoded.Latitude, reverseGeocoded.Longitude);
				
				// check if the right click was for start / destination
				if(this.id == "input-to"){
				    this.name = line1;
					destMarker = new H.map.Marker(coordiante,
					{
						icon: createIcon(line1, line2)
					});
					markerLayer.addObject(destMarker);
					// trigger route request if destination provided
					removeAndStartRouting();
				}else{
				    this.name = line1;
					// remove markers added previously
					markerLayer.removeAll();
					line2 = "1";
					startMarker = new H.map.Marker(coordiante,
					{
						icon: createIcon(line1, line2)
					});
					markerLayer.addObject(startMarker);
				}
				
			}
			 // function is triggered when right click on map
			 // is triggered
			function contextClick() {
				var reverseGeocodingParameters = {
					prox: this.coord + ',500',
					mode: 'retrieveAddresses',
					maxresults: 1
				};
				geocoder.reverseGeocode(
					reverseGeocodingParameters,
					onSuccess.bind(this.inpElement),
					function(e) { alert(e); }
				);
				 Spinner.showSpinner();
			}
			
			// Add menu items for the right click
			var fromHere = new H.util.ContextItem({
				label: 'Route from here',
				callback: contextClick.bind({coord: rClickCoordsStr,
					inpElement: document.getElementById("input-from"),
						isDestination : false})
			});
			var toHere = new H.util.ContextItem({
				label: 'Route to here',
				callback: contextClick.bind({coord: rClickCoordsStr,
					inpElement: document.getElementById("input-to"),
						isDestination : true})
			});
			
			e.items.push(fromHere);
			e.items.push(toHere);
			
		});



		// add behavior control
		this.mapBehavior = new H.mapevents.Behavior(new H.mapevents.MapEvents(map));

		// Enable the default UI
		this.ui = H.ui.UI.createDefault(map, defaultLayers);

		//add JS API Release information
		this.releaseInfoTxt.innerHTML = "Used Service Releases:/n";
		this.releaseInfoTxt.innerHTML+="JS API: 3."+ H.buildInfo().version;

		//add MRS Release information
		loadMRSVersionTxt("1.base.maps.hereapi.cn");

		//helper
		this.releaseGeocoderShown = false;
		this.releaseRoutingShown = false;

		// adding rectangle control
		this.rectControl = new H.ui.ZoomRectangle();
		ui.addControl("rectControl", rectControl);

		// adding Overview Control
		this.overviewControl = new H.ui.Overview(defaultLayers.normal.map);
		ui.addControl("overviewControl", overviewControl);

		// react on a Base Layer change, and update the Overview Control
		map.addEventListener("baselayerchange", function() { overviewControl.setBaseLayer(map.getBaseLayer());});

	}.bind(window)

	//which color are we on?
	var clrcnt = 0;
	// Check whether the environment should use hi-res maps
	var hidpi = ('devicePixelRatio' in window && devicePixelRatio > 1);
	
	// check if the site was loaded via secure connection
	var secure = true; //(location.protocol === 'https:') ? true : false;
	
	var alternatives =0;

	mapInit();
	
	window.addEventListener('resize', function() { map.getViewPort().resize(); });
	// settings for the different regions
	var region =
	{
		"EU" :
		{
			start: "Frankfurt",
			startCoordinate: new H.geo.Point(50.11208, 8.68342),
			dest: "Elly-Beinhorn-Straße Eschborn",
			destCoordinate: new H.geo.Point(50.14041, 8.57211),
			center :
			{
				lat: 50.04614777739499,
				lng: 8.613584243471905
			},
			
			lang: "en-GB"
		},
		"NA" :
		{
			start: "Causeway St, Boston, MA",
			startCoordinate: new H.geo.Point(42.365818, -71.0605927),
			dest: "Allston,Boston, MA",
			destCoordinate: new H.geo.Point(42.36268, -71.1302),
			center :
			{
				lat: 42.37758215166187,
				lng: -71.1293934179688
			},
			
			lang: "en-US"
		},
		"BR" :
		{
			start: "Praca Benedito Calixto Sao Paulo",
			startCoordinate: new H.geo.Point(-23.5591698, -46.6801682),
			dest: "Rua Roque Barbosa Lima Sao Paulo",
			destCoordinate: new H.geo.Point(-23.5910606, -46.5458107),
			center :
			{
				lat: -23.559147337720326,
				lng: -46.678417109809544
			},
			
			lang: "es-ES"
		},
		"MEA":
		{
			start: "Dubai",
			startCoordinate: new H.geo.Point(25.26952, 55.30884),
			dest: "Al ain",
			destCoordinate: new H.geo.Point(24.20733, 55.68616),
			center:
			{
				lat: 24.8041548,
				lng: 55.4198266
			},
			
			lang: "ar-AR"
		},
		"KOR":
		{
			start: "대한민국 서울특별시 강남구 테헤란로",
			startCoordinate: new H.geo.Point(37.52309063949981, 127.03910454067722),
			dest: "대한민국 인천광역시 남동구 인천신항대로",
			destCoordinate: new H.geo.Point(37.37051296977164, 126.69238399685446),
			center:
			{
				lat: 37.52309063949981,
				lng: 127.03910454067722
			},
			lang: "en-US"
		},
		"CHN": 
		{
			start: "中国北京市丰台区丰体南路",
			startCoordinate: new H.geo.Point(39.8659302,116.2661016),
			dest: "中国北京市东城区永定门东滨河路20号",
			destCoordinate: new H.geo.Point(39.87672,116.39912),
			center: 
			{
				lat: 39.872319692276015, 
				lng: 116.42163440463315
			},
			lang: "zn-CH"
		}
	};
	
	// route drag marker
	var svg = '<svg height="20" width="20" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">' +
	'<circle cx="10" cy="10" r="9" stroke="black" stroke-width="2" fill="none" />' +
	'</svg>';

	var icon = new H.map.Icon(svg);
	var releaseShown = false;
	var dragRoute = [];
	var currentRoute=0,oldAlternative;
	var zindex=1000;
	
	/**
	* Function adds listener to enable 'drag'
	* function for the rendered route
	**/
	function createDragRoutes(alternatives,waypoint){
		dragMarkerLayer.removeAll();
		for(var i=0;i<alternatives;i++){
			dragRoute[i]=new Object();	
			// create a marker for 'drag' action
			// be default at the start position
			dragRoute[i].routeHoverMarker =
				new H.map.Marker(waypoint, {
				icon: icon,
				visibility: false,
				zIndex: 1
			});
			
			dragRoute[i].routeHoverMarker.draggable = true;
			dragMarkerLayer.addObject(dragRoute[i].routeHoverMarker);

			// dispatch events from pointer move
			dragRoute[i].pointermoveOnRouteHoverMarker = function(evt) {
				currentPolyline.dispatchEvent(evt);
				currentPolyline.setZIndex(zindex++);
			};

			dragRoute[i].dragstartOnRouteHoverMarker = function (evt) {
				currentPolyline.dispatchEvent(evt);
			};

			dragRoute[i].dragOnRouteHoverMarker = function(evt) {
				var coord = map.screenToGeo((evt.pointers[0].viewportX), (evt.pointers[0].viewportY + 8));
				evt.target.setGeometry(coord);
				currentPolyline.dispatchEvent(evt);
			};

			dragRoute[i].dragendOnRouteHoverMarker = function (evt) {
				currentPolyline.dispatchEvent(evt);
			};

			dragRoute[i].routeHoverMarker.addEventListener("pointermove", dragRoute[i].pointermoveOnRouteHoverMarker, false);
			dragRoute[i].routeHoverMarker.addEventListener("dragstart", dragRoute[i].dragstartOnRouteHoverMarker, true);
			dragRoute[i].routeHoverMarker.addEventListener("drag", dragRoute[i].dragOnRouteHoverMarker, false);
			dragRoute[i].routeHoverMarker.addEventListener("dragend", dragRoute[i].dragendOnRouteHoverMarker, false);
			
			dragRoute[i].calculateRouteParams = {
			};
		}
	}

	/**
	* Function creates a SVG ivon with the provided texts
	**/
	var createIcon = function (line1, line2) {
		var div = document.createElement("div");

		var div = document.createElement("div");
		var svgMarker = "";

		if(line1 != "" && line2 != "")
		{
			svgMarker = svgMarkerImage_Line;
			svgMarker = svgMarker.replace(/__line1__/g, line1);
			svgMarker = svgMarker.replace(/__line2__/g, line2);
			svgMarker = svgMarker.replace(/__width__/g, line1.length  * 4 + 57);
			svgMarker = svgMarker.replace(/__widthAll__/g, line1.length  * 4 + 120);
		}
		else
		{
			svgMarker = svgMarkerBase64Image.replace(/__widthAll__/g, "60");
		}
		div.innerHTML = svgMarker;

		return new H.map.Icon(svgMarker, {
			anchor: new H.math.Point(24, 57)
		});
	};
	
	/**
	* Function renders the routes and alternatives
	* retrieved from route response
	**/
	var MultiplePolyline = function (route) {
		
			var routeInfo = {};
			var strip = new H.geo.LineString();
			
			var shape = route.shape,
			waypoints = route.waypoint,
			i,
			l = shape.length,
			distance,
			hour,
			minute,
			second,
			timeleft = route.summary.baseTime;

			hour = Math.floor( timeleft / 3600 );
			minute = Math.floor( (timeleft % 3600) / 60 );
			second = Math.floor( timeleft % 60 );

			document.getElementById("time").innerHTML = "Time: " + hour + ":" + minute + ":" + second;

			// Show the summary
			if(metricSystem)
			document.getElementById("distance").innerHTML = "Distance: " + route.summary.distance / 1000 + " km";
			else
			document.getElementById("distance").innerHTML = "Distance: " + (route.summary.distance *0.000621371192) + " miles";
			
			// Create a coordinates array for the route polyline
			for(i = 0; i < l; i++)
			{
				var arrShape = shape[i].split(',').map(function(item) { return parseFloat(item); });
				strip.pushLatLngAlt.apply(strip, arrShape);

				for(var iW = 0,lW = waypoints.length; iW < lW; iW++){
					var wPos = waypoints[iW].mappedPosition;
					if(wPos.latitude == arrShape[0] && wPos.longitude == arrShape[1]) waypoints[iW].idxInStrip = i;
				}
			}

			// Create markers from the waypoints
			var waypointMarkers = [];
			for(var iW = 0,lW = waypoints.length; iW < lW; iW++){
				var wPos = new H.geo.Point(waypoints[iW].mappedPosition.latitude, waypoints[iW].mappedPosition.longitude);
				if (!window.calcRouteTimeOutId){
					waypointMarkers.push( createWaypointMarker(wPos, wPos.lat.toFixed(5) + ", " + wPos.lng.toFixed(5), ""+(iW+1)) );
				}

			}
			routeInfo.waypointMarkers = waypointMarkers;

			// add polyline on the map
			var color=  "rgba("+(Math.floor((Math.random() * 255) + 1)) 
			    + ","+ (Math.floor((Math.random() * 255) + 1)) 
				  +","+ (Math.floor((Math.random() * 255) + 1)) +","+ 1 + ")";
			dragRoute[currentRoute].polyline = new H.map.Polyline(strip,
			{
				zIndex: 99,
				style:
				{
					lineWidth: 5,
					strokeColor: color, 
				}
			});
			dragRoute[currentRoute].polyline.routeNo=currentRoute;
			routeInfo.polyline = dragRoute[currentRoute].polyline;
			dragRoute[currentRoute].polyline.setData(routeInfo);
			
			// waypoint marker array
			for(var iW = 0,lW = waypointMarkers.length; iW < lW; iW++){
				var info = {
					idxW: iW,
					polyline: dragRoute[currentRoute].polyline,
					waypointMarkers: waypointMarkers
				};
				waypointMarkers[iW].setData(info);
			}

			dragRoute[currentRoute].polyline.draggable = true;
			dragRoute[currentRoute].polyline.setArrows({color:"#F00F",width:2,length:3,frequency: 4});

			// add marker on polyline hover for 'drag' option
			dragRoute[currentRoute].pointerenterOnPolyline = function (evt) {
				currentPolyline = evt.target;
				currentRoute=currentPolyline.routeNo;
				var coord = map.screenToGeo((evt.pointers[0].viewportX), (evt.pointers[0].viewportY + 8));
				dragRoute[currentPolyline.routeNo].routeHoverMarker.setGeometry(coord);
				dragRoute[currentPolyline.routeNo].routeHoverMarker.setVisibility(true);
			};
			
			// listner triggered when 'drag' action on polyline is started
			dragRoute[currentRoute].dragstartOnPolyline = function (evt) {
				currentPolyline = evt.currentTarget;
				currentRoute=currentPolyline.routeNo;
				
	            // diable map interaction until the drag action is completed
		        mapBehavior.disable();

				var viewportX = evt.pointers[0].viewportX,
				viewportY = evt.pointers[0].viewportY,
				pStrip = currentPolyline.getGeometry(),
				clipedPolyline = clipPolyline(currentPolyline, viewportX, viewportY, 8),
				foundIdxPolylineForWaypoint = false,
				partPolyline = false,
				// flag required in 'dra-end' listner
				eachStripPointFn = function(lat, lng, alt, idx) {
					if(foundIdxPolylineForWaypoint) return;
					if(partPolyline[0] == lat && partPolyline[1] == lng) {
						for(var iP=2,lP=partPolyline.length; iP<lP; iP+=2){
							var stripPoint = pStrip.extractPoint(idx+iP/2);
							if( stripPoint && stripPoint.lat==partPolyline[iP] && stripPoint.lng==partPolyline[iP+1]){
								foundIdxPolylineForWaypoint = idx;
							}
							else{
								foundIdxPolylineForWaypoint = false;
							}
						}
					}

				};
				if(clipedPolyline[0]) {
					partPolyline = clipedPolyline[0];
					pStrip.eachLatLngAlt(eachStripPointFn);
				};
				dragRoute[currentPolyline.routeNo].foundIdxPolylineForWaypoint = foundIdxPolylineForWaypoint;
			};

			// Listner on drag-end action
			dragRoute[currentRoute].dragendOnPolyline = function (evt) {
				// enable map interaction
				mapBehavior.enable();
				
				// hide the drag marker
				dragRoute[currentPolyline.routeNo].routeHoverMarker.setVisibility(false);
				
				currentPolyline = evt.currentTarget;
				currentRoute=currentPolyline.routeNo;
				var coord = map.screenToGeo((evt.pointers[0].viewportX), 
							(evt.pointers[0].viewportY + 8));
				if(!dragRoute[currentPolyline.routeNo].foundIdxPolylineForWaypoint) return;
				
				// Trigger new route request with the additional waypoint
				if(dragRoute[currentPolyline.routeNo].allWaypoitsForNewRoute.length >= 2){
					calculateRoute(dragRoute[currentPolyline.routeNo].allWaypoitsForNewRoute);
					var routeInfo = currentPolyline.getData();
					removeAllRouteObjects();
				}
			};

			dragRoute[currentRoute].polyline.addEventListener(
					"pointerenter", dragRoute[currentRoute].pointerenterOnPolyline, 
					false);
			
			// listner for 'drag' marker moving on the polyline
			dragRoute[currentRoute].polyline.addEventListener("pointermove", function(evt){

				currentPolyline = evt.currentTarget;
				currentRoute=currentPolyline.routeNo;
				
				// hide the drag marker if view port lies outside
				var viewportX = evt.pointers[0].viewportX,
				viewportY = evt.pointers[0].viewportY,
				clipedPolyline = clipPolyline(currentPolyline, viewportX, viewportY, 8);
				if(clipedPolyline.length == 0) {
					dragRoute[currentPolyline.routeNo].routeHoverMarker.setVisibility(false);
					return;
				}
				
				// update the marker position
				coord = map.screenToGeo(viewportX, (viewportY + 8));
				dragRoute[currentPolyline.routeNo].routeHoverMarker.setGeometry(coord);
			}, false);
			
			// listner for 'drag' start event
			dragRoute[currentRoute].polyline.addEventListener(
				"dragstart", 
				dragRoute[currentRoute].dragstartOnPolyline, false);
				
			// listner for drag action
			dragRoute[currentRoute].polyline.addEventListener("drag", function(evt){
				currentPolyline = evt.currentTarget;	
				currentRoute=currentPolyline.routeNo;				
				var coord = map.screenToGeo((evt.pointers[0].viewportX), (evt.pointers[0].viewportY + 8)),
				newWpIdx = false;

				if(!dragRoute[currentPolyline.routeNo].foundIdxPolylineForWaypoint) return;
				dragRoute[currentPolyline.routeNo].allWaypoitsForNewRoute = [];
				
				// add the waypoints to for route calculation at a position
				// between the existing waypoints
				for(var iW = 0,lW = waypoints.length; iW < lW; iW++){
					var wPos = waypoints[iW].mappedPosition;
					dragRoute[currentPolyline.routeNo].allWaypoitsForNewRoute.push(
						new H.geo.Point(wPos.latitude, wPos.longitude));
					if(dragRoute[currentPolyline.routeNo].foundIdxPolylineForWaypoint > waypoints[iW].idxInStrip
						&& waypoints[iW+1]
						&& dragRoute[currentPolyline.routeNo].foundIdxPolylineForWaypoint < waypoints[iW+1].idxInStrip){
						dragRoute[currentPolyline.routeNo].allWaypoitsForNewRoute.push(coord);
						newWpIdx = iW+1;
					}
				}
				
			}, false);
			dragRoute[currentRoute].polyline.addEventListener("dragend", dragRoute[currentRoute].dragendOnPolyline, false);

			//add the new route
			polylineLayer.addObject(dragRoute[currentRoute].polyline);
			
			if (window.tmpPolyline){
				try{
					polylineLayer.removeObject(window.tmpPolyline);
				}catch(e){}

				window.tmpPolyline = false;
			}
			
			if(window.calcRouteTimeOutId) 
				window.tmpPolyline = dragRoute[currentRoute].polyline;

			var fence = new H.map.Polyline(strip,
			{
				style:
				{
					lineColor: color,
					lineWidth: 80
				}
			});
			
			fenceLayer.addObject(fence);
			
			// time out function to avoid issue caused by 
			// delay in api responses
			clearTimeout(window.calcRouteTimeOutId);
			window.calcRouteTimeOutId = false;

		Spinner.hideSpinner();
	};

	/**
	* Function calculated the route between 
	* the passed points
	**/
	var calculateRoute = function(wPoints)
	{

		if(wPoints.length == 2 && (!wPoints[0] || !wPoints[1])) return;
		
		// retrieve all the route options
		var e = document.getElementById("routeOption");
		var routeOption = e.options[e.selectedIndex].value;

		var mode = routeOption + ";";
		mode += document.getElementById('transitmode').value + ";";
		mode += 'traffic:';

		e = document.getElementById('traffic');
		var tr = e.options[e.selectedIndex].value;

		mode += tr + ";";
		mode += 'tollroad:' + document.getElementById("tollroads").value + ',';
		mode += 'motorway:' + document.getElementById("motorways").value + ',';
		mode += 'boatFerry:' + document.getElementById("boatFerries").value + ',';
		mode += 'railFerry:' + document.getElementById("railFerries").value + ',';
		mode += 'tunnel:' + document.getElementById("tunnels").value + ',';
		mode += 'dirtRoad:' + document.getElementById("dirtRoads").value;

		alternatives = parseFloat(document.getElementById("alt").value);
		if(oldAlternative != alternatives){
			createDragRoutes(alternatives,wPoints[0]);
			oldAlternative=alternatives;
		}
		
		var e = document.getElementById("metric");
		var isMetric = e.options[e.selectedIndex].value;
		
		if (isMetric == 1) {
			metricSystem = true;
		}
		else{
			metricSystem = false;
		}
		
		// No alternatives are available with
		// intermediate way point 
		if(wPoints.length>2){
			alternatives =1;
		}
		
		dragRoute[currentRoute].calculateRouteParams = {
				'app_code': app_code,
				'app_id': app_id,
				'mode': mode,
				'language': lang,
				'representation' : 'overview',
				'metricSystem' : metricSystem ? "metric" : "imperial",
				'routeAttributes' : 'wp,sc,sm,sh,bb,lg,no,shape',
				'legAttributes' : 'wp,mn,li,le,tt',
				'maneuverAttributes' : 'po,sh,tt,le,ti,li,pt,pl,rn,nr,di',
				'linkAttributes' : 'sh,le,sl,ds,tr',
				'instructionformat' : 'html',
				'alternatives' : alternatives-1,
				
			};
		
		// add the waypoints
		for(var iW=0,lW=wPoints.length; iW < lW; iW++){
			dragRoute[currentRoute].calculateRouteParams['waypoint'+iW] = 'geo!' + wPoints[iW].lat + "," + wPoints[iW].lng;
		}

		var calculateRouteParams = dragRoute[currentRoute].calculateRouteParams;

		var  r1 = router.calculateRoute(calculateRouteParams, onResult, onError);
		Spinner.showSpinner();
			
	};
	
	/**
	* Call back when route calculation was sucessfull
	**/
	var onResult = function(result) {
			if(!result.response || !result.response.route || !result.response.route[0]) {Spinner.hideSpinner();return;}
			if(releaseShown != true){
				releaseInfoTxt.innerHTML+="<br />HLP Routing: "+result.response.metaInfo.moduleVersion;
				releaseShown = true;
			}
			
			for(var i=0; i<result.response.route.length; i++){
				currentRoute=i;
				MultiplePolyline(result.response.route[i]);
			}
			
			currentRoute=0;
	};
	var onError = function(error) {
			Spinner.hideSpinner();
			console.log(error);
   };

   /**
   * Create Markers for waypoints
   **/
	var createWaypointMarker = function(geocoord, info1, info2) {
		info1 = info1 ? info1 : "";
		info2 = info2 ? info2 : "";

		var marker = new H.map.Marker({lat: geocoord.lat, lng: geocoord.lng}, {
			icon: createIcon(info1, info2)
		});
		marker.draggable = true;
		marker.addEventListener("dragstart", function(evt){
			mapBehavior.disable();
		}, false);

		// Add marker drag event listners
		marker.addEventListener("drag", function(evt){
			// update the drag marker position
			var curMarker = evt.currentTarget,
			coord = map.screenToGeo((evt.pointers[0].viewportX), (evt.pointers[0].viewportY));
			curMarker.setGeometry(coord);

		}, false);

		// Darg event end listners triggers route calculation
		marker.addEventListener("dragend", function(evt){
			// update marker position
			mapBehavior.enable();
			var curMarker = evt.currentTarget;
			var coord = map.screenToGeo((evt.pointers[0].viewportX ), (evt.pointers[0].viewportY ));
			curMarker.setGeometry(coord);
			
			var routeInfo = curMarker.getData();
			var waypointMarkers = routeInfo.waypointMarkers;
			var wPoints = [];
			// add waypoints for new route calculation
			for(var iW=0,lW=waypointMarkers.length; iW<lW; iW++){
				var wPos = waypointMarkers[iW].getGeometry();
				wPoints.push(waypointMarkers[iW].getGeometry());
			}
			calculateRoute(wPoints);
			removeAllRouteObjects();

		}, false);

		// Add marker to the markerLayer, to make it visible on the map
		markerLayer.addObject(marker);
		map.setViewBounds(markerLayer.getBounds());
		return marker;
	};

	/**
	* Remove markers and request the route
	**/
	var removeAndStartRouting = function()
	{
		Spinner.showSpinner();	
		
		// If previous routes are to be kept do not remove them
		// Max 5 previous routes are kept 
		if (document.getElementById('showMultipleRoutes').checked) {
			clrcnt++;
			if(clrcnt >= 5)
			{
				markerLayer.removeObject(markerLayer.getObjects()[0]);
				markerLayer.removeObject(markerLayer.getObjects()[0]);
				polylineLayer.removeObject(polylineLayer.getObjects()[0]);
				fenceLayer.removeObject(fenceLayer.getObjects()[0]);
				clrcnt = 0;
			}
		} else {
			markerLayer.removeAll();
			polylineLayer.removeAll();
			fenceLayer.removeAll();
			clrcnt = 0;
		}

		// get the from and to destinations
		var from = document.getElementById('input-from').value,
		to = document.getElementById('input-to').value,
		fromCoord = document.getElementById('input-from').name,
		toCoord = document.getElementById('input-to').name,
		gFrom, gTo;

		// Trigger Geocode request if only address  is provided in the 
		// input fields
		if(from && to) {
			gFrom = new Object();
			gTo =  new Object();
			// Trigger geocode request if coordinated for start
			// and destination are not available
			if(fromCoord == "") {
				geocoder.geocode({searchText: from}, function(result) {
					//add Geocoder Release information if not already done
					if (releaseGeocoderShown== false){
						loadGeocoderVersionTxt("geocoder.hereapi.cn");
						releaseGeocoderShown = true;
					}
					if(result &&
						result.Response &&
						 result.Response.View && 
						  result.Response.View[0].Result[0] &&
						   result.Response.View[0].Result[0].Location != null){
						gFrom = result.Response.View[0].Result[0].Location.DisplayPosition;
					}
					else if(result &&
						result.Response &&
						 result.Response.View && 
						  result.Response.View[0].Result[0] &&
						   result.Response.View[0].Result[0].Place &&
						   result.Response.View[0].Result[0].Place.Locations != null){
						gFrom = result.Response.View[0].Result[0].Place.Locations[0].DisplayPosition;
					}else{
						console.log("Geocoding failed");
						return;
					}
					gFrom.lat = gFrom.Latitude;
					gFrom.lng = gFrom.Longitude;
					
					// Trigger route request
					calculateRoute([gFrom, gTo]);
				}, function(){});
			}else{
				gFrom.lat = fromCoord.split(",")[0];
				gFrom.lng = fromCoord.split(",")[1];
				calculateRoute([gFrom, gTo]);
			}

			if(toCoord == "") {
			geocoder.geocode({searchText: to}, function(result) {
				//add Geocoder Release information if not already done
				if (releaseGeocoderShown== false){
					loadGeocoderVersionTxt("geocoder.hereapi.cn");
					releaseGeocoderShown = true;
				}
				if(result &&
						result.Response &&
						 result.Response.View && 
						  result.Response.View[0].Result[0] &&
						   result.Response.View[0].Result[0].Location != null){
					gTo = result.Response.View[0].Result[0].Location.DisplayPosition;
				}
				else if(result &&
							result.Response &&
							 result.Response.View && 
							  result.Response.View[0].Result[0] &&
							   result.Response.View[0].Result[0].Place &&
							   result.Response.View[0].Result[0].Place.Locations != null){
						gTo = result.Response.View[0].Result[0].Place.Locations[0].DisplayPosition;
					}
				else{
							console.log("Geocoding failed");
							return;
				}
				
				gTo.lat = gTo.Latitude;
				gTo.lng = gTo.Longitude;
				// Trigger route request
				calculateRoute([gFrom, gTo]);
			}, function(){});
			}else{
				gTo.lat = toCoord.split(",")[0];
				gTo.lng = toCoord.split(",")[1];
				calculateRoute([gFrom, gTo]);
			}
		}
	};

	/**
	* Remove all routes from the map
	**/
	var removeAllRouteObjects = function(){
		
			// keep previous routes
			if (!document.getElementById('showMultipleRoutes').checked)
			polylineLayer.removeAll();
			
			// remove all markers
			markerLayer.removeAll();
			
			dragMarkerLayer.forEach(function(object,number,group){
				if(object instanceof H.map.Marker){
					object.setVisibility(false);
				}
			});
		
	};

	/**
	* Utility function for clipping the polyline
	**/
	var clipPolyline = function(polyline, viewportX, viewportY, bboxSize){
		var	pleft = viewportX - bboxSize,
		pright = viewportX + bboxSize,
		ptop = viewportY - bboxSize,
		pbottom = viewportY + bboxSize,
		coordLeftTop = map.screenToGeo(pleft, ptop),
		coordRigthBottom = map.screenToGeo(pright, pbottom),
		rect = new H.geo.Rect(coordLeftTop.lat,coordLeftTop.lng,coordRigthBottom.lat,coordRigthBottom.lng),
		clipedPolyline = polyline.clip(rect);

		return clipedPolyline;
	};

	// Utility function to change region
	var switchRegion = function(reg)
	{
		cfg = region[reg];
		map.setCenter(new H.geo.Point(cfg.center.lat, cfg.center.lng));
		document.getElementById("input-from").value = cfg.start;
		document.getElementById("input-to").value = cfg.dest;
		metricSystem = cfg.metric;
		language = cfg.lang;
		start = cfg.startCoordinate;
		destination = cfg.destCoordinate;
		markerLayer.removeAll();
	};

	switchRegion("CHN");

	function startCapture()
	{
		capture(map, ui);
	}

	function capture(map, ui) {
		// Capturing area of the map is asynchronous, callback function receives HTML5 canvas
		// element with desired map area rendered on it.
		// We also pass a H.ui.UI reference in order to see the ScaleBar in the result.
		// If dimensions are omitted, whole map will be captured, from top left corner up to
		// the bottom right.
		map.capture(function(canvas) {
			if (canvas) {
				 var image = new Image();
				 image.src = canvas.toDataURL();
				 var w = window.open("");
				 w.document.write(image.outerHTML);
				 w.document.close(); 
				} else {
				// For example when map is in Panorama mode
				alert('Capturing is not supported');
			}
		}, [ui], 0, 0, document.getElementById("mapContainer").offsetWidth, document.getElementById("mapContainer").offsetHeight);
	}
</script>