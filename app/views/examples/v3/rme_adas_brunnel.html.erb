<%= javascript_include_tag "jszip.min.js" %>

<% content_for :title, "RME ADAS and Tunnel / Bridge Demo" %>

<div class="ctrl-panel">
	<span id="toggle-ctrl-panel" class="glyphicon glyphicon-menu-left"></span>
  <h5>Click on the map to retrieve ADAS and Tunnel / Bridge Flags for a Link</h5>
  <div id="feedback"></div>
</div>

<div id="mapContainer"></div>
<script type="text/javascript">

	/*
		(C) HERE 2018
		Author dschuette
	*/
	
	// Check whether the environment should use hi-res maps
	var hidpi = ('devicePixelRatio' in window && devicePixelRatio > 1);

		// check if the site was loaded via secure connection
	var secure = (location.protocol === 'https:') ? true : false;
	
	// Create a platform object to communicate with the HERE REST APIs
	var platform = new H.service.Platform({
		app_id: app_id,
		app_code: app_code,
		useHTTPS: secure
	}),
	defaultLayers = platform.createDefaultLayers(hidpi ? 512 : 256, hidpi ? 320 : null);	

	// Instantiate a map in the 'map' div, set the base map to normal
	var map = new H.Map(document.getElementById('mapContainer'), defaultLayers.normal.map, {
		center: new H.geo.Point( 50.05503120236033, 8.390389227337437),
		zoom: 19,
		pixelRatio: hidpi ? 2 : 1
	});
	
	var objContainer = new H.map.Group();
	map.addObject(objContainer);
	
	// Enable the map event system
	var mapevents = new H.mapevents.MapEvents(map);

	// Enable map interaction (pan, zoom, pinch-to-zoom)
	var behavior = new H.mapevents.Behavior(mapevents);

	// Enable the default UI
	var ui = H.ui.UI.createDefault(map, defaultLayers);

	// setup the Streetlevel imagery
	platform.configure(H.map.render.panorama.RenderEngine);

	window.addEventListener('resize', function() { map.getViewPort().resize(); });
	
	map.addEventListener('tap', function (currentEvent) 
	{
		var lastClickedPos = map.screenToGeo(currentEvent.currentPointer.viewportX, currentEvent.currentPointer.viewportY);
		submitPosition(lastClickedPos);
	});
	
	var ADASNTU_TO_WGS84 = 10000000,
		curvatureColor = "rgba(255, 50, 190, 0.7)";
	
	var submitPosition = function(pos)
	{
		objContainer.removeAll();
		var zip = new JSZip(),
			lastPos = "SEQNR,\tLATITUDE,\tLONGITUDE\n1,\t" + (Math.round(pos.lat * 100000.0) / 100000.0) + ",\t" + (Math.round(pos.lng * 100000.0) / 100000.0);
		zip.file("temp.zip", lastPos);
		var content = zip.generate({type : "base64" , compression: "DEFLATE", compressionOptions : {level:6} });
		var url = "https://rme.api.here.com/2/matchroute.json?routemode=car&file=" + encodeURIComponent(content);
			url += "&attributes=ADAS_ATTRIB_FCn(*),ROAD_GEOM_FCn(*)" + "&app_id=" + app_id + "&app_code=" + app_code + "&callback=gotRouteMatchResponse";
		
		script = document.createElement("script");
		script.src = url;
		document.body.appendChild(script);
	}
	
	var gotRouteMatchResponse = function (respJsonObj) {
		if (respJsonObj.error != undefined || respJsonObj.faultCode != undefined || respJsonObj.type) {
			alert(respJsonObj.message + "\nStatus: " + respJsonObj.responseCode);
			return;
		}
		// draw the route
		var routeLinks = respJsonObj.RouteLinks;
		
		if(routeLinks && routeLinks[0] && routeLinks[0].attributes && routeLinks[0].attributes.ADAS_ATTRIB_FCN && routeLinks[0].attributes.ADAS_ATTRIB_FCN[0] && routeLinks[0].attributes.ADAS_ATTRIB_FCN[0].HPX)
		{
			if(respJsonObj.RouteLinks[0].attributes && respJsonObj.RouteLinks[0].attributes.ADAS_ATTRIB_FCN)
			{
				var attr = respJsonObj.RouteLinks[0].attributes.ADAS_ATTRIB_FCN[0];
				var curvature = attr.CURVATURES.replace('[','').replace(']','');
				var headings = attr.HEADINGS.replace('[','').replace(']','');
				var hpx = attr.HPX.replace('[','').replace(']','');
				var hpy = attr.HPY.replace('[','').replace(']','');
				var slopeString = attr.SLOPES.replace('[','').replace(']','');

				var curvatureSplit = curvature.split(',');
				var headingsSplit = headings.split(',');
				var hpxSplit = hpx.split(',');
				var hpySplit = hpy.split(',');

				if(curvatureSplit.length == 1 && curvatureSplit[0] == '')
				{
					curvatureSplit = [];
				}
				if(headingsSplit.length == 1 && headingsSplit[0] == '')
				{
					headingsSplit = [];
				}

				// result arrays for curvature and heading
				var resultCurvature = [];
				var resultHeading = [];
				var resultHpx = [];
				var resultHpy = [];

				resultCurvature.push(0);
				resultHeading.push(0);

				// 2. handle shape curvatures, heading, coordinates
				var lastCoordValueCurvature = 0;
				for(var k = 0; k < curvatureSplit.length; k++)
				{
					lastCoordValueCurvature += parseInt(curvatureSplit[k]);
					resultCurvature.push(lastCoordValueCurvature);
				}

				var lastCoordValueHeading = 0;
				for(var k = 0; k < headingsSplit.length; k++)
				{
					lastCoordValueHeading += parseInt(headingsSplit[k]);
					resultHeading.push(parseInt(lastCoordValueHeading));
				}

				var lastCoordValueHpx = 0;
				for(var k = 0; k < hpxSplit.length; k++)
				{
					lastCoordValueHpx += parseInt(hpxSplit[k]);
					resultHpx.push(lastCoordValueHpx);
				}

				var lastCoordValueHpy = 0;
				for(var k = 0; k < hpySplit.length; k++)
				{
					lastCoordValueHpy += parseInt(hpySplit[k]);
					resultHpy.push(lastCoordValueHpy);
				}

				resultCurvature.push(0);
				resultHeading.push(0);
				
				var previousCoordXonLink = 0, 
					previousCoordYonLink = 0, 
					previousSlopeOnLink = 0,
					previousCoordX = 0, 
					previousCoordY = 0,
					arraySlopes = slopeString == null ? null : slopeString.split(','),
					routeLinkDir = parseInt(respJsonObj.RouteLinks[0].linkId) < 0 ? '-' : '+';
				
				for(var d = 0; d < resultHpx.length; d++)
				{
					var x = resultHpx[d];
					var y = resultHpy[d];
					var curvature = resultCurvature[d];
					var heading = resultHeading[d];
					renderCurvature(x, y, curvature, heading);
					
					var hpx = parseFloat(x) / ADASNTU_TO_WGS84;
					var hpy = parseFloat(y) / ADASNTU_TO_WGS84;
					var slope = slopeString == null ? null : parseFloat(arraySlopes[d]) / 1000.0 + previousSlopeOnLink; // 360 degree
					previousSlopeOnLink = slope;
					slope = (slope == null) ? 0.0 : (routeLinkDir == '+' ? slope : -slope); // when driving to ref node, slope values must be reversed

					slopeDegree = Math.round(slope * 10.0) / 10.0;
					slopePercent = slopeString == null ? 0.0 : Math.round(Math.tan(slope * Math.PI / 180.0) * 100);
					slopeBackColor = ((slopeString == null) || (Math.abs(slope) == 1000000)) ? "#BBBBFFB0" : (slopePercent == 0.0 ? "#FFFFFF" : (slopePercent > 0.0 ? "#F099B6" : "#99F0B8"));
					slopeText = ((slopeString == null) || (Math.abs(slope) == 1000000)) ? "no slope" : (slopePercent + "% = " + slopeDegree + " \u00B0");

					marker = new H.map.Marker(new H.geo.Point(hpy, hpx),
					{
						icon: createIconSlope(slopeText, slopeText.length, slopeBackColor)
					});
					objContainer.addObject(marker);
					

					previousCoordXonLink = x;
					previousCoordYonLink = y;
					
				}
			}
			
			var str = '<h4><b>LinkID: ' + respJsonObj.RouteLinks[0].linkId + '</b><br></h4>';
				str += '<h5>CURVATURES:</h5>' + attr.CURVATURES + '<br>';
				str += '<h5>HEADINGS:</h5>' + attr.HEADINGS + '<br>';
				str += '<h5>HPX:</h5>' + attr.HPX + '<br>';
				str += '<h5>HPY:</h5>' + attr.HPY + '<br>';
				str += '<h5>SLOPES:</h5>' + attr.SLOPES + '<br>';
				
				attr = respJsonObj.RouteLinks[0].attributes.ROAD_GEOM_FCN[0];
				str += '<h5>Tunnel:</h5>' + (attr.TUNNEL == 'N' ? 'No' : 'Yes') + '<br>';
				str += '<h5>Bridge:</h5>' + (attr.BRIDGE == 'N' ? 'No' : 'Yes') + '<br>';
			
			document.getElementById("feedback").innerHTML = str;
		}
		
		for (var l = 0; l < routeLinks.length; l++) {
			var coords1 = routeLinks[l].shape.split(" ");
			var coords2 = new H.geo.Strip();
			for (var c = 0; c < coords1.length; c += 2)
				coords2.pushLatLngAlt(parseFloat(coords1[c]), parseFloat(coords1[c + 1]), null);
			objContainer.addObject(new H.map.Polyline(coords2, {zIndex: 3, style: {lineWidth: 8, strokeColor: "rgba(18, 65, 145, 0.7)", lineJoin: "round"}}));
		}

		// draw the original and the matched trace points
		tracePoints = respJsonObj.TracePoints;
		for (var l = 0; l < tracePoints.length; l++) {
			var p = tracePoints[l];
			objContainer.addObject(new H.map.Marker(new H.geo.Point(p.lat, p.lon), {icon: createIcon("#000000", l)}));
			objContainer.addObject(new H.map.Marker(new H.geo.Point(p.latMatched, p.lonMatched), {icon: createIcon("#00FF00", l)}));
		}
	}
	
	var createIcon = function (color, text) {
		var div = document.createElement("div");
		var svg = '<svg xmlns="http://www.w3.org/2000/svg" width="28px" height="16px">' +
			'<line x1="14"  y1="16" x2="14" y2="9" stroke="' + color + '"/>' +
			'<text font-size="10" x="14" y="8" text-anchor="middle" fill="' + color + '">' + text + '</text>' +
			'</svg>';
		div.innerHTML = svg;
		return new H.map.Icon(svg, {anchor: {x : 14, y : 16}});
	};
	
		/**
	This method takes ADAS coordinates (x, y) and their curvature and heading information and renders
	the curvature on the map display via polylines
	*/
	function renderCurvature(x, y, curvature, heading)
	{
		// Missing values are represented as NULL or as 1000000000.
		if(curvature == 1000000000)
			return;

		// calculate shifted lat/lon for curvature polyline
		var radius = curvature == 0 ? 0 : (1000000.0 / curvature);
		radius = radius == 0 ? 0 : -((1 / radius) * 2000);
		var bearingSuppl = -90;
		if (radius < 0)
		{
			radius *= -1;
			bearingSuppl *= -1;
		}

		var lat = y / ADASNTU_TO_WGS84;
		var lon = x / ADASNTU_TO_WGS84;
		var shiftedLatLon = shiftLatLon(lat, lon, (heading + bearingSuppl + 360) % 360, radius);

		// create polyline
		var strip = new H.geo.Strip();
		strip.pushLatLngAlt(lat, lon, 0);
		strip.pushLatLngAlt(shiftedLatLon[0], shiftedLatLon[1], 0);

		var curvatureLine = new H.map.Polyline(strip,
			{
				style:
				{
					lineWidth: 2,
					strokeColor: curvatureColor
				}
			});
			objContainer.addObject(curvatureLine);
	}
	
	/**
	This method shifts the given lat and long along given bearing to the given distance
	*/
	function shiftLatLon(latDegrees, lonDegrees, bearing, distance)
	{
		var earthRadius = 6371000;
		// convert input parameters from decimal degrees into radians
		var latRad = (latDegrees) * Math.PI / 180;
		var lonRad = (lonDegrees) * Math.PI / 180;

		var bearingRad = bearing * Math.PI / 180;
		var distRad = distance / earthRadius;

		var latNewRad = Math.asin(Math.sin(latRad) * Math.cos(distRad) + Math.cos(latRad) * Math.sin(distRad)
		* Math.cos(bearingRad));
		var lonNewRad = lonRad
		+ Math.atan2(Math.sin(bearingRad) * Math.sin(distRad) * Math.cos(latRad), Math.cos(distRad) - Math.sin(latRad)
		* Math.sin(latNewRad));

		// convert input parameters from radians into decimal degrees
		var latNewDegrees = latNewRad * 180 / Math.PI;
		var lonNewDegrees = lonNewRad * 180 / Math.PI;
		var latLonRet = [];
		latLonRet.push(latNewDegrees);
		latLonRet.push(lonNewDegrees);
		return latLonRet;
	}
	
	var createIconSlope = function (text, width, colour) {

		var svg = '<svg width="__widthAll__" height="36" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">' +
			'<g>' +
			'<rect id="label-box" ry="3" rx="3" stroke="#000000" height="22" width="__width__" y="10" x="27" fill="__colour__"/>' +
			'<text id="label-text" xml:space="preserve" text-anchor="start" font-family="Sans-serif" font-size="10" font-weight="bold" y="24" x="45" stroke-width="0" fill="#000000">__text__</text>' +
			'</g>' +
			'</svg>';

		var _width = width * 7;
		var _widthAll = width * 7 + 60;
		var _height = 36;

		svg = svg.replace(/__text__/g, text);
		svg = svg.replace(/__width__/g, _width);
		svg = svg.replace(/__widthAll__/g, _widthAll);
		svg = svg.replace(/__colour__/g, colour);

		return new H.map.Icon(svg, {
			size: { w: _widthAll, h: _height },
			anchor: { x: Math.round(_widthAll / 2), y: Math.round(_height / 2) }
		});

	};
</script>
